
Systick_Driver_In_Objective_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  0800052c  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  0800052c  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  0800052c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800052c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000867  00000000  00000000  0001059f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000303  00000000  00000000  00010e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00011110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008f  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001252  00000000  00000000  00011277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001048  00000000  00000000  000124c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004646  00000000  00000000  00013511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000228  00000000  00000000  00017b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00017d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800050c 	.word	0x0800050c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800050c 	.word	0x0800050c

08000204 <main>:



GPIO_InitTypeDef myGPIO_InitStruct;

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	__LIB_RCC_GPIOA_CLK_ENABLE();
 8000208:	f000 f8f8 	bl	80003fc <__LIB_RCC_GPIOA_CLK_ENABLE>
	
	myGPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0x34>)
 800020e:	2211      	movs	r2, #17
 8000210:	605a      	str	r2, [r3, #4]
	myGPIO_InitStruct.Pin  = GPIO_PIN_5;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x34>)
 8000214:	2220      	movs	r2, #32
 8000216:	601a      	str	r2, [r3, #0]
	myGPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <main+0x34>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
	
	LIB_GPIO_Init(GPIOA,&myGPIO_InitStruct);
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <main+0x34>)
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <main+0x38>)
 8000222:	f000 f80d 	bl	8000240 <LIB_GPIO_Init>
	


	while(1){
		
	 LIB_SYSTICK_DelayMs(500);
 8000226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022a:	f000 f8f7 	bl	800041c <LIB_SYSTICK_DelayMs>
	 LIB_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800022e:	2120      	movs	r1, #32
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <main+0x38>)
 8000232:	f000 f8d1 	bl	80003d8 <LIB_GPIO_TogglePin>
	 LIB_SYSTICK_DelayMs(500);
 8000236:	e7f6      	b.n	8000226 <main+0x22>
 8000238:	2000001c 	.word	0x2000001c
 800023c:	40020000 	.word	0x40020000

08000240 <LIB_GPIO_Init>:
#define	GPIO_PUPDR_PUPDR0						0x3U<<0
#define	GPIO_OSPEEDER_OSPEEDR0			0x3U<<0
#define	GPIO_OTYPER_OT0							0x1U<<0
#define GPIO_OUTPUT_TYPE						0x00010U

void LIB_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_InitTypeDef *GPIO_Init){
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]

 uint32_t position;
 uint32_t temp =  0x0U;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 uint32_t ioposition = 0x00U;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
 uint32_t iocurrent =  0x00U;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
	
	for(position =0U; position <GPIO_NUMBER;position++){
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e0b2      	b.n	80003c2 <LIB_GPIO_Init+0x182>
		 
		ioposition = 0x01U << position;
 800025c:	2201      	movs	r2, #1
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	fa02 f303 	lsl.w	r3, r2, r3
 8000264:	60fb      	str	r3, [r7, #12]
		iocurrent =  (uint32_t)(GPIO_Init->Pin)&ioposition;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	4013      	ands	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
		
		if(iocurrent == ioposition){
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	429a      	cmp	r2, r3
 8000276:	f040 80a1 	bne.w	80003bc <LIB_GPIO_Init+0x17c>
		 /*Alternate function selection*/	
		if((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||(GPIO_Init->Mode == GPIO_MODE_AF_OD)){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	2b02      	cmp	r3, #2
 8000280:	d003      	beq.n	800028a <LIB_GPIO_Init+0x4a>
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	2b12      	cmp	r3, #18
 8000288:	d123      	bne.n	80002d2 <LIB_GPIO_Init+0x92>
		
		 temp  =  GPIOx->AFR[position >>3U];
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	08da      	lsrs	r2, r3, #3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3208      	adds	r2, #8
 8000292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000296:	613b      	str	r3, [r7, #16]
		 temp &= ~(0xFU <<((uint32_t)(position & 0x07U) * 4U));
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	f003 0307 	and.w	r3, r3, #7
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	220f      	movs	r2, #15
 80002a2:	fa02 f303 	lsl.w	r3, r2, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	693a      	ldr	r2, [r7, #16]
 80002aa:	4013      	ands	r3, r2
 80002ac:	613b      	str	r3, [r7, #16]
		 temp |=((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U)*4U)); 
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	691a      	ldr	r2, [r3, #16]
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	f003 0307 	and.w	r3, r3, #7
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	613b      	str	r3, [r7, #16]
		 GPIOx->AFR[position >>3U] =  temp;
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	08da      	lsrs	r2, r3, #3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3208      	adds	r2, #8
 80002cc:	6939      	ldr	r1, [r7, #16]
 80002ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		}
			
			/*Direction mode*/
		 temp  =  GPIOx->MODER;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	613b      	str	r3, [r7, #16]
		 temp &=~(GPIO_MODER_MODE0 <<(position * 2U));
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	2203      	movs	r2, #3
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	43db      	mvns	r3, r3
 80002e4:	693a      	ldr	r2, [r7, #16]
 80002e6:	4013      	ands	r3, r2
 80002e8:	613b      	str	r3, [r7, #16]
		 temp |=(GPIO_Init->Mode & GPIO_MODE) <<(position *2U);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	f003 0203 	and.w	r2, r3, #3
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	613b      	str	r3, [r7, #16]
		 GPIOx->MODER =  temp;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	601a      	str	r2, [r3, #0]
		
		/*Alternate function selection*/
		if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode== GPIO_MODE_OUTPUT_OD)||
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	2b11      	cmp	r3, #17
 800030c:	d00b      	beq.n	8000326 <LIB_GPIO_Init+0xe6>
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d007      	beq.n	8000326 <LIB_GPIO_Init+0xe6>
			  (GPIO_Init->Mode== GPIO_MODE_AF_PP) || (GPIO_Init->Mode== GPIO_MODE_AF_OD)){
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
		if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode== GPIO_MODE_OUTPUT_OD)||
 800031a:	2b02      	cmp	r3, #2
 800031c:	d003      	beq.n	8000326 <LIB_GPIO_Init+0xe6>
			  (GPIO_Init->Mode== GPIO_MODE_AF_PP) || (GPIO_Init->Mode== GPIO_MODE_AF_OD)){
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	2b12      	cmp	r3, #18
 8000324:	d132      	bne.n	800038c <LIB_GPIO_Init+0x14c>
			
		  temp =  GPIOx->OSPEEDR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position *2U));
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	2203      	movs	r2, #3
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43db      	mvns	r3, r3
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	4013      	ands	r3, r2
 800033c:	613b      	str	r3, [r7, #16]
			temp |= (GPIO_Init->Speed <<(position *2U));
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	693a      	ldr	r2, [r7, #16]
 800034c:	4313      	orrs	r3, r2
 800034e:	613b      	str	r3, [r7, #16]
			GPIOx->OSPEEDR =temp;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	609a      	str	r2, [r3, #8]
					
					/*Output type*/
			temp =  GPIOx->OTYPER;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_OTYPER_OT0 << (position *2U));
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	2201      	movs	r2, #1
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	43db      	mvns	r3, r3
 8000368:	693a      	ldr	r2, [r7, #16]
 800036a:	4013      	ands	r3, r2
 800036c:	613b      	str	r3, [r7, #16]
			temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE)>> 4U) <<(position *2U));
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	091b      	lsrs	r3, r3, #4
 8000374:	f003 0201 	and.w	r2, r3, #1
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	693a      	ldr	r2, [r7, #16]
 8000382:	4313      	orrs	r3, r2
 8000384:	613b      	str	r3, [r7, #16]
			GPIOx->OTYPER =  temp;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	693a      	ldr	r2, [r7, #16]
 800038a:	605a      	str	r2, [r3, #4]
		}
		
		 temp  =  GPIOx->PUPDR;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	613b      	str	r3, [r7, #16]
		 temp &=~(GPIO_PUPDR_PUPDR0 <<(position * 2U));
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	2203      	movs	r2, #3
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	693a      	ldr	r2, [r7, #16]
 80003a0:	4013      	ands	r3, r2
 80003a2:	613b      	str	r3, [r7, #16]
		 temp |=((GPIO_Init->Pull) << (position *2U));
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	689a      	ldr	r2, [r3, #8]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	fa02 f303 	lsl.w	r3, r2, r3
 80003b0:	693a      	ldr	r2, [r7, #16]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	613b      	str	r3, [r7, #16]
		 GPIOx->PUPDR = temp;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	693a      	ldr	r2, [r7, #16]
 80003ba:	60da      	str	r2, [r3, #12]
	for(position =0U; position <GPIO_NUMBER;position++){
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	3301      	adds	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	2b0f      	cmp	r3, #15
 80003c6:	f67f af49 	bls.w	800025c <LIB_GPIO_Init+0x1c>
		}
	 

	}
	
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	371c      	adds	r7, #28
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <LIB_GPIO_TogglePin>:
	   GPIOx->BSRR = (uint32_t)GPIO_Pin <<16;
	}
}


void LIB_GPIO_TogglePin(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]

	 GPIOx->ODR ^= GPIO_Pin;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	405a      	eors	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	615a      	str	r2, [r3, #20]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <__LIB_RCC_GPIOA_CLK_ENABLE>:

void __LIB_RCC_GPIOA_CLK_ENABLE(void){  RCC->AHB1ENR |= GPIOA_EN;}
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <__LIB_RCC_GPIOA_CLK_ENABLE+0x1c>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <__LIB_RCC_GPIOA_CLK_ENABLE+0x1c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40023800 	.word	0x40023800

0800041c <LIB_SYSTICK_DelayMs>:
	
	SysTick->CTRL =0;  /*Stop the timer (En =0)*/
	
}

void LIB_SYSTICK_DelayMs(uint32_t milli){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

	int i;
	
		/*Configure SysTick*/
	SysTick->LOAD =  16000 -1;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <LIB_SYSTICK_DelayMs+0x50>)
 8000426:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800042a:	605a      	str	r2, [r3, #4]
	SysTick->VAL =0; /*clear current value register*/
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <LIB_SYSTICK_DelayMs+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5; /*Enable systick, no interrupt*/
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <LIB_SYSTICK_DelayMs+0x50>)
 8000434:	2205      	movs	r2, #5
 8000436:	601a      	str	r2, [r3, #0]
	
		for(i=0;i<milli;i++){
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e009      	b.n	8000452 <LIB_SYSTICK_DelayMs+0x36>
		
		/*Wait until the COUNTFLAG is set*/
	  while((SysTick->CTRL &0x10000)== 0){}
 800043e:	bf00      	nop
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <LIB_SYSTICK_DelayMs+0x50>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <LIB_SYSTICK_DelayMs+0x24>
		for(i=0;i<milli;i++){
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3301      	adds	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	429a      	cmp	r2, r3
 8000458:	d8f1      	bhi.n	800043e <LIB_SYSTICK_DelayMs+0x22>
			
	}
	
	SysTick->CTRL =0;  /*Stop the timer (En =0)*/
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <LIB_SYSTICK_DelayMs+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
	
	

 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000e010 	.word	0xe000e010

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f811 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff feaf 	bl	8000204 <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b4:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 80004b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004bc:	20000030 	.word	0x20000030

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	; (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	; (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	; (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	; (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
