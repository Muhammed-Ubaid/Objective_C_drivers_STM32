
Objective_C_GPIO_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080017b4  080017b4  000117b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a18  08001a18  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a18  08001a18  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a18  08001a18  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001a7c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001a7c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000268d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bce  00000000  00000000  0002275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00023330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a9  00000000  00000000  00023598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  00023741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000321d  00000000  00000000  0003e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091178  00000000  00000000  00041853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f98  00000000  00000000  000d29cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d3964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800179c 	.word	0x0800179c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800179c 	.word	0x0800179c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Led_computeEffi_vcall>:
static inline void Led_runDiagnostics_vcall(Led_Type const * const me){

	(*me->vptr->run_diagnostics)(me);
}

static inline uint32_t Led_computeEffi_vcall(Led_Type const * const me){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  return (*me->vptr->compute_efficiency)(me);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	4798      	blx	r3
 80002c2:	4603      	mov	r3, r0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <Led_ctor>:


static void run_diagnostics(Led_Type const * const me);
static uint32_t compute_efficiency(Led_Type const * const me);

void Led_ctor(Led_Type * const me, LedColor_Type _color, LedState_Type _state){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70fb      	strb	r3, [r7, #3]
 80002d8:	4613      	mov	r3, r2
 80002da:	70bb      	strb	r3, [r7, #2]
		&run_diagnostics,
		&compute_efficiency

	};

	me->vptr =  &vtable;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a4c      	ldr	r2, [pc, #304]	; (8000410 <Led_ctor+0x144>)
 80002e0:	601a      	str	r2, [r3, #0]

	me->color  = _color;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	711a      	strb	r2, [r3, #4]
	me->state  = _state;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	78ba      	ldrb	r2, [r7, #2]
 80002ec:	715a      	strb	r2, [r3, #5]


	 /*Hardware Init*/
	RCC->AHB1ENR |= LED_PORT_CLOCK;
 80002ee:	4b49      	ldr	r3, [pc, #292]	; (8000414 <Led_ctor+0x148>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a48      	ldr	r2, [pc, #288]	; (8000414 <Led_ctor+0x148>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30

	switch(_color){
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	f200 8083 	bhi.w	8000408 <Led_ctor+0x13c>
 8000302:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <Led_ctor+0x3c>)
 8000304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000308:	08000319 	.word	0x08000319
 800030c:	080003cd 	.word	0x080003cd
 8000310:	08000355 	.word	0x08000355
 8000314:	08000391 	.word	0x08000391

		case RED:
			LED_PORT->MODER |=LED_RED_MODE_BIT;
 8000318:	4b3f      	ldr	r3, [pc, #252]	; (8000418 <Led_ctor+0x14c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a3e      	ldr	r2, [pc, #248]	; (8000418 <Led_ctor+0x14c>)
 800031e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000322:	6013      	str	r3, [r2, #0]
		  if(me->state  == ON){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d109      	bne.n	8000340 <Led_ctor+0x74>
			   LED_PORT->ODR |= LED_RED_PIN;
 800032c:	4b3a      	ldr	r3, [pc, #232]	; (8000418 <Led_ctor+0x14c>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a39      	ldr	r2, [pc, #228]	; (8000418 <Led_ctor+0x14c>)
 8000332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000336:	6153      	str	r3, [r2, #20]
				printf("The RED Led is set ON \n\r");
 8000338:	4838      	ldr	r0, [pc, #224]	; (800041c <Led_ctor+0x150>)
 800033a:	f000 fbbd 	bl	8000ab8 <iprintf>
			else{
			  LED_PORT->ODR &= ~LED_RED_PIN;
        printf("The RED Led is set OFF \n\r");

			}
		break;
 800033e:	e063      	b.n	8000408 <Led_ctor+0x13c>
			  LED_PORT->ODR &= ~LED_RED_PIN;
 8000340:	4b35      	ldr	r3, [pc, #212]	; (8000418 <Led_ctor+0x14c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a34      	ldr	r2, [pc, #208]	; (8000418 <Led_ctor+0x14c>)
 8000346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800034a:	6153      	str	r3, [r2, #20]
        printf("The RED Led is set OFF \n\r");
 800034c:	4834      	ldr	r0, [pc, #208]	; (8000420 <Led_ctor+0x154>)
 800034e:	f000 fbb3 	bl	8000ab8 <iprintf>
		break;
 8000352:	e059      	b.n	8000408 <Led_ctor+0x13c>

		case YELLOW:
			LED_PORT->MODER |=LED_YELLOW_MODE_BIT;
 8000354:	4b30      	ldr	r3, [pc, #192]	; (8000418 <Led_ctor+0x14c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <Led_ctor+0x14c>)
 800035a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800035e:	6013      	str	r3, [r2, #0]
		  if(me->state  == ON){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d109      	bne.n	800037c <Led_ctor+0xb0>
			   LED_PORT->ODR |= LED_YELLOW_PIN;
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <Led_ctor+0x14c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <Led_ctor+0x14c>)
 800036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000372:	6153      	str	r3, [r2, #20]
				printf("The YELLOW Led is set ON \n\r");
 8000374:	482b      	ldr	r0, [pc, #172]	; (8000424 <Led_ctor+0x158>)
 8000376:	f000 fb9f 	bl	8000ab8 <iprintf>
			else{
			  LED_PORT->ODR &= ~LED_YELLOW_PIN;
        printf("The YELLOW Led is set OFF \n\r");

			}
		break;
 800037a:	e045      	b.n	8000408 <Led_ctor+0x13c>
			  LED_PORT->ODR &= ~LED_YELLOW_PIN;
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <Led_ctor+0x14c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <Led_ctor+0x14c>)
 8000382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000386:	6153      	str	r3, [r2, #20]
        printf("The YELLOW Led is set OFF \n\r");
 8000388:	4827      	ldr	r0, [pc, #156]	; (8000428 <Led_ctor+0x15c>)
 800038a:	f000 fb95 	bl	8000ab8 <iprintf>
		break;
 800038e:	e03b      	b.n	8000408 <Led_ctor+0x13c>

		case BLUE:
			LED_PORT->MODER |=LED_BLUE_MODE_BIT;
 8000390:	4b21      	ldr	r3, [pc, #132]	; (8000418 <Led_ctor+0x14c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a20      	ldr	r2, [pc, #128]	; (8000418 <Led_ctor+0x14c>)
 8000396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800039a:	6013      	str	r3, [r2, #0]
		  if(me->state  == ON){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d109      	bne.n	80003b8 <Led_ctor+0xec>
			   LED_PORT->ODR |= LED_BLUE_PIN;
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <Led_ctor+0x14c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <Led_ctor+0x14c>)
 80003aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003ae:	6153      	str	r3, [r2, #20]
				printf("The BLUE Led is set ON \n\r");
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <Led_ctor+0x160>)
 80003b2:	f000 fb81 	bl	8000ab8 <iprintf>
			else{
			  LED_PORT->ODR &= ~LED_BLUE_PIN;
        printf("The BLUE Led is set OFF \n\r");

			}
		break;
 80003b6:	e027      	b.n	8000408 <Led_ctor+0x13c>
			  LED_PORT->ODR &= ~LED_BLUE_PIN;
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <Led_ctor+0x14c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a16      	ldr	r2, [pc, #88]	; (8000418 <Led_ctor+0x14c>)
 80003be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003c2:	6153      	str	r3, [r2, #20]
        printf("The BLUE Led is set OFF \n\r");
 80003c4:	481a      	ldr	r0, [pc, #104]	; (8000430 <Led_ctor+0x164>)
 80003c6:	f000 fb77 	bl	8000ab8 <iprintf>
		break;
 80003ca:	e01d      	b.n	8000408 <Led_ctor+0x13c>

		case GREEN:
			LED_PORT->MODER |=LED_GREEN_MODE_BIT;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <Led_ctor+0x14c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a11      	ldr	r2, [pc, #68]	; (8000418 <Led_ctor+0x14c>)
 80003d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003d6:	6013      	str	r3, [r2, #0]
		  if(me->state  == ON){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d109      	bne.n	80003f4 <Led_ctor+0x128>
			   LED_PORT->ODR |= LED_GREEN_PIN;
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <Led_ctor+0x14c>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <Led_ctor+0x14c>)
 80003e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ea:	6153      	str	r3, [r2, #20]
				printf("The GREEN Led is set ON \n\r");
 80003ec:	4811      	ldr	r0, [pc, #68]	; (8000434 <Led_ctor+0x168>)
 80003ee:	f000 fb63 	bl	8000ab8 <iprintf>
			else{
			  LED_PORT->ODR &= ~LED_GREEN_PIN;
        printf("The GREEN Led is set OFF \n\r");

			}
		break;
 80003f2:	e008      	b.n	8000406 <Led_ctor+0x13a>
			  LED_PORT->ODR &= ~LED_GREEN_PIN;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <Led_ctor+0x14c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <Led_ctor+0x14c>)
 80003fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003fe:	6153      	str	r3, [r2, #20]
        printf("The GREEN Led is set OFF \n\r");
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <Led_ctor+0x16c>)
 8000402:	f000 fb59 	bl	8000ab8 <iprintf>
		break;
 8000406:	bf00      	nop

	}
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	080019cc 	.word	0x080019cc
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	080017b4 	.word	0x080017b4
 8000420:	080017d0 	.word	0x080017d0
 8000424:	080017ec 	.word	0x080017ec
 8000428:	08001808 	.word	0x08001808
 800042c:	08001828 	.word	0x08001828
 8000430:	08001844 	.word	0x08001844
 8000434:	08001860 	.word	0x08001860
 8000438:	0800187c 	.word	0x0800187c

0800043c <run_diagnostics>:
	 }

	return me->state;
}

static void run_diagnostics(Led_Type const * const me){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  (void)me;
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <compute_efficiency>:

static uint32_t compute_efficiency(Led_Type const * const me){
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]

   (void)me;
	  return 0U;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <computeLedEffs>:
		Led_runDiagnostics_vcall(led_modules[i]);

}

}
void computeLedEffs(Led_Type const * led_modules[]){
 8000466:	b580      	push	{r7, lr}
 8000468:	b084      	sub	sp, #16
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]


	 int i;
	   for(i =0;led_modules[i] !=(Led_Type *)0;i++){
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e00a      	b.n	800048a <computeLedEffs+0x24>

       Led_computeEffi_vcall(led_modules[i]);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff16 	bl	80002b0 <Led_computeEffi_vcall>
	   for(i =0;led_modules[i] !=(Led_Type *)0;i++){
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3301      	adds	r3, #1
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1ed      	bne.n	8000474 <computeLedEffs+0xe>

		 }


}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MedicalLed_ctor>:

 void MedicalLed_ctor(MedicalLed_Type * const me,
											 LedWavelength_Type _wavelength,
											LedColor_Type   _color,
											LedState_Type _state)
 {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	4608      	mov	r0, r1
 80004ae:	4611      	mov	r1, r2
 80004b0:	461a      	mov	r2, r3
 80004b2:	4603      	mov	r3, r0
 80004b4:	807b      	strh	r3, [r7, #2]
 80004b6:	460b      	mov	r3, r1
 80004b8:	707b      	strb	r3, [r7, #1]
 80004ba:	4613      	mov	r3, r2
 80004bc:	703b      	strb	r3, [r7, #0]

	   (void(*)(Led_Type const * const m))&MedicalLed_runDiagnostics,
		 (uint32_t(*)(Led_Type const * const m))&MedicalLed_computeEfficiency
	 };

	 Led_ctor(&me->super,_color,_state);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	783a      	ldrb	r2, [r7, #0]
 80004c2:	7879      	ldrb	r1, [r7, #1]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff01 	bl	80002cc <Led_ctor>


	 me->super.vptr = &vtable;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <MedicalLed_ctor+0x3c>)
 80004ce:	601a      	str	r2, [r3, #0]

	 me->wavelength = _wavelength;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	887a      	ldrh	r2, [r7, #2]
 80004d4:	811a      	strh	r2, [r3, #8]

 }
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	080019d4 	.word	0x080019d4

080004e4 <MedicalLed_computeEfficiency>:

	  me->wavelength = wavelength;
 }


 uint32_t  MedicalLed_computeEfficiency(MedicalLed_Type const * const me){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	 /*Dummy efficiency computation*/

	 const int8_t input = 120;
 80004ec:	2378      	movs	r3, #120	; 0x78
 80004ee:	73fb      	strb	r3, [r7, #15]
	 const int8_t output = 86;
 80004f0:	2356      	movs	r3, #86	; 0x56
 80004f2:	73bb      	strb	r3, [r7, #14]
	 const int8_t k1 =4;
 80004f4:	2304      	movs	r3, #4
 80004f6:	737b      	strb	r3, [r7, #13]
	 const int8_t k2 = 6;
 80004f8:	2306      	movs	r3, #6
 80004fa:	733b      	strb	r3, [r7, #12]

	 int8_t K;

	 /*if wavelength ==IR K=4 else K=6 */
	 K =  me->wavelength == INFRARED ? k1 : k2;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	891b      	ldrh	r3, [r3, #8]
 8000500:	f240 328e 	movw	r2, #910	; 0x38e
 8000504:	4293      	cmp	r3, r2
 8000506:	d102      	bne.n	800050e <MedicalLed_computeEfficiency+0x2a>
 8000508:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800050c:	e001      	b.n	8000512 <MedicalLed_computeEfficiency+0x2e>
 800050e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000512:	72fb      	strb	r3, [r7, #11]

	 int8_t eff = ((input/output)*100)-K;
 8000514:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800051c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	4413      	add	r3, r2
 8000528:	461a      	mov	r2, r3
 800052a:	0091      	lsls	r1, r2, #2
 800052c:	461a      	mov	r2, r3
 800052e:	460b      	mov	r3, r1
 8000530:	4413      	add	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	b2da      	uxtb	r2, r3
 8000536:	7afb      	ldrb	r3, [r7, #11]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	72bb      	strb	r3, [r7, #10]


	 printf("Medical LED module efficiency is :  %d....\n\r",eff);
 800053e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000542:	4619      	mov	r1, r3
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MedicalLed_computeEfficiency+0x74>)
 8000546:	f000 fab7 	bl	8000ab8 <iprintf>

	 return eff;
 800054a:	f997 300a 	ldrsb.w	r3, [r7, #10]



 }
 800054e:	4618      	mov	r0, r3
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	08001920 	.word	0x08001920

0800055c <MedicalLed_runDiagnostics>:




 void MedicalLed_runDiagnostics(MedicalLed_Type const *const me){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

   /*Dummy diagnostics sequence*/

	 for(int i=0;i<20;i++){
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e006      	b.n	8000578 <MedicalLed_runDiagnostics+0x1c>

		 printf("Medical LED Diagnostis stage: %d....\n\r",i);
 800056a:	68f9      	ldr	r1, [r7, #12]
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <MedicalLed_runDiagnostics+0x2c>)
 800056e:	f000 faa3 	bl	8000ab8 <iprintf>
	 for(int i=0;i<20;i++){
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b13      	cmp	r3, #19
 800057c:	ddf5      	ble.n	800056a <MedicalLed_runDiagnostics+0xe>
		 //Do something....


	 }

 }
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	08001950 	.word	0x08001950

0800058c <PowerLed_ctor>:
void PowerLed_ctor(PowerLed_Type * const me,
									 LedColor_Type   _color,
									 LedState_Type	_state,
									 LedDiamter_Type  _diameter,
									 LedCurrent_Type   _current,
									 LedVoltage_Type  _voltage){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	4608      	mov	r0, r1
 8000596:	4611      	mov	r1, r2
 8000598:	461a      	mov	r2, r3
 800059a:	4603      	mov	r3, r0
 800059c:	70fb      	strb	r3, [r7, #3]
 800059e:	460b      	mov	r3, r1
 80005a0:	70bb      	strb	r3, [r7, #2]
 80005a2:	4613      	mov	r3, r2
 80005a4:	707b      	strb	r3, [r7, #1]
	   (void(*)(Led_Type const * const m))&PowerLed_runDiagnostics,
		 (uint32_t(*)(Led_Type const * const m))&PowerLed_computeEfficiency
	 };


 Led_ctor(&me->super,_color,_state);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	78ba      	ldrb	r2, [r7, #2]
 80005aa:	78f9      	ldrb	r1, [r7, #3]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe8d 	bl	80002cc <Led_ctor>

	me->super.vptr = &vtable;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <PowerLed_ctor+0x48>)
 80005b6:	601a      	str	r2, [r3, #0]


 me->diameter  = _diameter;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	787a      	ldrb	r2, [r7, #1]
 80005bc:	721a      	strb	r2, [r3, #8]
 me->voltage   = _voltage;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7d3a      	ldrb	r2, [r7, #20]
 80005c2:	729a      	strb	r2, [r3, #10]
 me->current    = _current;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7c3a      	ldrb	r2, [r7, #16]
 80005c8:	725a      	strb	r2, [r3, #9]


}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080019dc 	.word	0x080019dc

080005d8 <PowerLed_computeEfficiency>:

 return me->voltage;
}


 uint32_t  PowerLed_computeEfficiency(PowerLed_Type const * const me){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

	 /*Dummy efficiency computation*/


	 const int8_t input = 120;
 80005e0:	2378      	movs	r3, #120	; 0x78
 80005e2:	73fb      	strb	r3, [r7, #15]
	 const int8_t output = 86;
 80005e4:	2356      	movs	r3, #86	; 0x56
 80005e6:	73bb      	strb	r3, [r7, #14]

	 int8_t eff =  ((input/output)*100) -((int8_t)(me->current)/2);
 80005e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	461a      	mov	r2, r3
 80005fe:	0091      	lsls	r1, r2, #2
 8000600:	461a      	mov	r2, r3
 8000602:	460b      	mov	r3, r1
 8000604:	4413      	add	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	b2da      	uxtb	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7a5b      	ldrb	r3, [r3, #9]
 800060e:	b25b      	sxtb	r3, r3
 8000610:	0fd9      	lsrs	r1, r3, #31
 8000612:	440b      	add	r3, r1
 8000614:	105b      	asrs	r3, r3, #1
 8000616:	b25b      	sxtb	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	737b      	strb	r3, [r7, #13]


	 printf("Power LED module efficiency is :  %d...\n\r",eff);
 8000620:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <PowerLed_computeEfficiency+0x60>)
 8000628:	f000 fa46 	bl	8000ab8 <iprintf>

	 return eff;
 800062c:	f997 300d 	ldrsb.w	r3, [r7, #13]

 }
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08001978 	.word	0x08001978

0800063c <PowerLed_runDiagnostics>:




 void PowerLed_runDiagnostics(PowerLed_Type const *const me){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

   /*Dummy diagnostics sequence*/

	 for(int i=0;i<(int)me->current;i++){
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e006      	b.n	8000658 <PowerLed_runDiagnostics+0x1c>

	   printf("Power LED Diagnostics stage: %d...\n\r",i);
 800064a:	68f9      	ldr	r1, [r7, #12]
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <PowerLed_runDiagnostics+0x34>)
 800064e:	f000 fa33 	bl	8000ab8 <iprintf>
	 for(int i=0;i<(int)me->current;i++){
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7a5b      	ldrb	r3, [r3, #9]
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4293      	cmp	r3, r2
 8000662:	dbf2      	blt.n	800064a <PowerLed_runDiagnostics+0xe>

	 }



 }
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	080019a4 	.word	0x080019a4

08000674 <main>:
#include "PowerLed.h"
#include "MedicalLed.h"



int main(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	b090      	sub	sp, #64	; 0x40
 8000678:	af02      	add	r7, sp, #8

  USART2_Init();
 800067a:	f000 f8db 	bl	8000834 <USART2_Init>
	MedicalLed_Type  mled1;
	PowerLed_Type pled1;
	Led_Type      led1;


	Led_ctor(&led1,RED,ON);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2201      	movs	r2, #1
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fe20 	bl	80002cc <Led_ctor>
	PowerLed_ctor(&pled1,RED,ON,DIAM_5MM,CURR_NORMAL,VOL_NORMAL);
 800068c:	f107 001c 	add.w	r0, r7, #28
 8000690:	2305      	movs	r3, #5
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2314      	movs	r3, #20
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2305      	movs	r3, #5
 800069a:	2201      	movs	r2, #1
 800069c:	2100      	movs	r1, #0
 800069e:	f7ff ff75 	bl	800058c <PowerLed_ctor>
	MedicalLed_ctor(&mled1,INFRARED,(LedColor_Type)INFRARED,ON);
 80006a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006a6:	2301      	movs	r3, #1
 80006a8:	228e      	movs	r2, #142	; 0x8e
 80006aa:	f240 318e 	movw	r1, #910	; 0x38e
 80006ae:	f7ff fef9 	bl	80004a4 <MedicalLed_ctor>

	Led_Type const * sys_leds[] = {&led1,(Led_Type*)&pled1,(Led_Type*)&mled1,(Led_Type*)0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]

	while(1){

	  //runSystemDiagnostics(sys_leds);

		computeLedEffs(sys_leds);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fecb 	bl	8000466 <computeLedEffs>
		for(int i=0;i<6000000;i++){}
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
 80006d4:	e002      	b.n	80006dc <main+0x68>
 80006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d8:	3301      	adds	r3, #1
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
 80006dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006de:	4a02      	ldr	r2, [pc, #8]	; (80006e8 <main+0x74>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	ddf8      	ble.n	80006d6 <main+0x62>
		computeLedEffs(sys_leds);
 80006e4:	e7f0      	b.n	80006c8 <main+0x54>
 80006e6:	bf00      	nop
 80006e8:	005b8d7f 	.word	0x005b8d7f

080006ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e00a      	b.n	8000714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fe:	f3af 8000 	nop.w
 8000702:	4601      	mov	r1, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf0      	blt.n	80006fe <_read+0x12>
  }

  return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e009      	b.n	800074c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f8d3 	bl	80008ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf1      	blt.n	8000738 <_write+0x12>
  }
  return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_close>:

int _close(int file)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000786:	605a      	str	r2, [r3, #4]
  return 0;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_isatty>:

int _isatty(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f000 fa96 	bl	8000d28 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20020000 	.word	0x20020000
 8000828:	00000400 	.word	0x00000400
 800082c:	20000078 	.word	0x20000078
 8000830:	200001c8 	.word	0x200001c8

08000834 <USART2_Init>:
 */


#include "uart.h"

void USART2_Init(void){
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
//1.enable clock access to uart2
 RCC->APB1ENR  |=  0x20000;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <USART2_Init+0x7c>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <USART2_Init+0x7c>)
 800083e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
//2.enable closk access to portA
 RCC->AHB1ENR   |=0x01;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <USART2_Init+0x7c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <USART2_Init+0x7c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
//3.Enable pins for alternate fucntions, pa2, pa3

GPIOA->MODER &=~0x00F0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <USART2_Init+0x80>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <USART2_Init+0x80>)
 8000856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800085a:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= 0x00A0; /*Enable alt. function for PA2, PA3*/
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <USART2_Init+0x80>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <USART2_Init+0x80>)
 8000862:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000866:	6013      	str	r3, [r2, #0]
//4.Configure type of alternate function

 GPIOA->AFR[0] &= ~0xFF00;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <USART2_Init+0x80>)
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <USART2_Init+0x80>)
 800086e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000872:	6213      	str	r3, [r2, #32]
 GPIOA->AFR[0] |= 0x7700;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <USART2_Init+0x80>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <USART2_Init+0x80>)
 800087a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800087e:	6213      	str	r3, [r2, #32]

//Configure uart

USART2->BRR  =  0x0683;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <USART2_Init+0x84>)
 8000882:	f240 6283 	movw	r2, #1667	; 0x683
 8000886:	609a      	str	r2, [r3, #8]
USART2->CR1  =  0x000C; /*Enabled tx rx, 8-bit data*/
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <USART2_Init+0x84>)
 800088a:	220c      	movs	r2, #12
 800088c:	60da      	str	r2, [r3, #12]
USART2->CR2  =  0x000;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <USART2_Init+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
USART2->CR3  =  0x000;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <USART2_Init+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
USART2->CR1  |=  0x2000; /*Enable uart */
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <USART2_Init+0x84>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <USART2_Init+0x84>)
 80008a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a4:	60d3      	str	r3, [r2, #12]



}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40004400 	.word	0x40004400

080008bc <USART2_write>:

int USART2_write(int ch){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	while(!(USART2->SR & 0x0080)){}
 80008c4:	bf00      	nop
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <USART2_write+0x2c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f9      	beq.n	80008c6 <USART2_write+0xa>
	USART2->DR = (ch & 0xFF);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <USART2_write+0x2c>)
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	6053      	str	r3, [r2, #4]

  return ch;
 80008da:	687b      	ldr	r3, [r7, #4]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40004400 	.word	0x40004400

080008ec <__io_putchar>:
	return USART2->DR;
}

/* To get prints in STMCube IDE*/
int __io_putchar(int ch)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ffe1 	bl	80008bc <USART2_write>
	return ch;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f9ff 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fe9d 	bl	8000674 <main>

0800093a <LoopForever>:

LoopForever:
  b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000948:	08001a20 	.word	0x08001a20
  ldr r2, =_sbss
 800094c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000950:	200001c8 	.word	0x200001c8

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <std>:
 8000958:	2300      	movs	r3, #0
 800095a:	b510      	push	{r4, lr}
 800095c:	4604      	mov	r4, r0
 800095e:	e9c0 3300 	strd	r3, r3, [r0]
 8000962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000966:	6083      	str	r3, [r0, #8]
 8000968:	8181      	strh	r1, [r0, #12]
 800096a:	6643      	str	r3, [r0, #100]	; 0x64
 800096c:	81c2      	strh	r2, [r0, #14]
 800096e:	6183      	str	r3, [r0, #24]
 8000970:	4619      	mov	r1, r3
 8000972:	2208      	movs	r2, #8
 8000974:	305c      	adds	r0, #92	; 0x5c
 8000976:	f000 f989 	bl	8000c8c <memset>
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <std+0x38>)
 800097c:	6263      	str	r3, [r4, #36]	; 0x24
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <std+0x3c>)
 8000980:	62a3      	str	r3, [r4, #40]	; 0x28
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <std+0x40>)
 8000984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <std+0x44>)
 8000988:	6224      	str	r4, [r4, #32]
 800098a:	6323      	str	r3, [r4, #48]	; 0x30
 800098c:	bd10      	pop	{r4, pc}
 800098e:	bf00      	nop
 8000990:	08000add 	.word	0x08000add
 8000994:	08000aff 	.word	0x08000aff
 8000998:	08000b37 	.word	0x08000b37
 800099c:	08000b5b 	.word	0x08000b5b

080009a0 <stdio_exit_handler>:
 80009a0:	4a02      	ldr	r2, [pc, #8]	; (80009ac <stdio_exit_handler+0xc>)
 80009a2:	4903      	ldr	r1, [pc, #12]	; (80009b0 <stdio_exit_handler+0x10>)
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <stdio_exit_handler+0x14>)
 80009a6:	f000 b869 	b.w	8000a7c <_fwalk_sglue>
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08001625 	.word	0x08001625
 80009b4:	2000000c 	.word	0x2000000c

080009b8 <cleanup_stdio>:
 80009b8:	6841      	ldr	r1, [r0, #4]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <cleanup_stdio+0x34>)
 80009bc:	4299      	cmp	r1, r3
 80009be:	b510      	push	{r4, lr}
 80009c0:	4604      	mov	r4, r0
 80009c2:	d001      	beq.n	80009c8 <cleanup_stdio+0x10>
 80009c4:	f000 fe2e 	bl	8001624 <_fflush_r>
 80009c8:	68a1      	ldr	r1, [r4, #8]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <cleanup_stdio+0x38>)
 80009cc:	4299      	cmp	r1, r3
 80009ce:	d002      	beq.n	80009d6 <cleanup_stdio+0x1e>
 80009d0:	4620      	mov	r0, r4
 80009d2:	f000 fe27 	bl	8001624 <_fflush_r>
 80009d6:	68e1      	ldr	r1, [r4, #12]
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <cleanup_stdio+0x3c>)
 80009da:	4299      	cmp	r1, r3
 80009dc:	d004      	beq.n	80009e8 <cleanup_stdio+0x30>
 80009de:	4620      	mov	r0, r4
 80009e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009e4:	f000 be1e 	b.w	8001624 <_fflush_r>
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	2000007c 	.word	0x2000007c
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	2000014c 	.word	0x2000014c

080009f8 <global_stdio_init.part.0>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <global_stdio_init.part.0+0x30>)
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <global_stdio_init.part.0+0x34>)
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <global_stdio_init.part.0+0x38>)
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	4620      	mov	r0, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	f7ff ffa6 	bl	8000958 <std>
 8000a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a10:	2201      	movs	r2, #1
 8000a12:	2109      	movs	r1, #9
 8000a14:	f7ff ffa0 	bl	8000958 <std>
 8000a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a22:	2112      	movs	r1, #18
 8000a24:	f7ff bf98 	b.w	8000958 <std>
 8000a28:	200001b4 	.word	0x200001b4
 8000a2c:	2000007c 	.word	0x2000007c
 8000a30:	080009a1 	.word	0x080009a1

08000a34 <__sfp_lock_acquire>:
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <__sfp_lock_acquire+0x8>)
 8000a36:	f000 b9a1 	b.w	8000d7c <__retarget_lock_acquire_recursive>
 8000a3a:	bf00      	nop
 8000a3c:	200001bd 	.word	0x200001bd

08000a40 <__sfp_lock_release>:
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <__sfp_lock_release+0x8>)
 8000a42:	f000 b99c 	b.w	8000d7e <__retarget_lock_release_recursive>
 8000a46:	bf00      	nop
 8000a48:	200001bd 	.word	0x200001bd

08000a4c <__sinit>:
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
 8000a50:	f7ff fff0 	bl	8000a34 <__sfp_lock_acquire>
 8000a54:	6a23      	ldr	r3, [r4, #32]
 8000a56:	b11b      	cbz	r3, 8000a60 <__sinit+0x14>
 8000a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a5c:	f7ff bff0 	b.w	8000a40 <__sfp_lock_release>
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__sinit+0x28>)
 8000a62:	6223      	str	r3, [r4, #32]
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__sinit+0x2c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f5      	bne.n	8000a58 <__sinit+0xc>
 8000a6c:	f7ff ffc4 	bl	80009f8 <global_stdio_init.part.0>
 8000a70:	e7f2      	b.n	8000a58 <__sinit+0xc>
 8000a72:	bf00      	nop
 8000a74:	080009b9 	.word	0x080009b9
 8000a78:	200001b4 	.word	0x200001b4

08000a7c <_fwalk_sglue>:
 8000a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a80:	4607      	mov	r7, r0
 8000a82:	4688      	mov	r8, r1
 8000a84:	4614      	mov	r4, r2
 8000a86:	2600      	movs	r6, #0
 8000a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8000a90:	d505      	bpl.n	8000a9e <_fwalk_sglue+0x22>
 8000a92:	6824      	ldr	r4, [r4, #0]
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d1f7      	bne.n	8000a88 <_fwalk_sglue+0xc>
 8000a98:	4630      	mov	r0, r6
 8000a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9e:	89ab      	ldrh	r3, [r5, #12]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d907      	bls.n	8000ab4 <_fwalk_sglue+0x38>
 8000aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	d003      	beq.n	8000ab4 <_fwalk_sglue+0x38>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	47c0      	blx	r8
 8000ab2:	4306      	orrs	r6, r0
 8000ab4:	3568      	adds	r5, #104	; 0x68
 8000ab6:	e7e9      	b.n	8000a8c <_fwalk_sglue+0x10>

08000ab8 <iprintf>:
 8000ab8:	b40f      	push	{r0, r1, r2, r3}
 8000aba:	b507      	push	{r0, r1, r2, lr}
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <iprintf+0x20>)
 8000abe:	ab04      	add	r3, sp, #16
 8000ac0:	6808      	ldr	r0, [r1, #0]
 8000ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ac6:	6881      	ldr	r1, [r0, #8]
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f000 fa7b 	bl	8000fc4 <_vfiprintf_r>
 8000ace:	b003      	add	sp, #12
 8000ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr
 8000ad8:	20000058 	.word	0x20000058

08000adc <__sread>:
 8000adc:	b510      	push	{r4, lr}
 8000ade:	460c      	mov	r4, r1
 8000ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae4:	f000 f8fc 	bl	8000ce0 <_read_r>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	bfab      	itete	ge
 8000aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000aee:	89a3      	ldrhlt	r3, [r4, #12]
 8000af0:	181b      	addge	r3, r3, r0
 8000af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000af6:	bfac      	ite	ge
 8000af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000afa:	81a3      	strhlt	r3, [r4, #12]
 8000afc:	bd10      	pop	{r4, pc}

08000afe <__swrite>:
 8000afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b02:	461f      	mov	r7, r3
 8000b04:	898b      	ldrh	r3, [r1, #12]
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	4605      	mov	r5, r0
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	4616      	mov	r6, r2
 8000b0e:	d505      	bpl.n	8000b1c <__swrite+0x1e>
 8000b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b14:	2302      	movs	r3, #2
 8000b16:	2200      	movs	r2, #0
 8000b18:	f000 f8d0 	bl	8000cbc <_lseek_r>
 8000b1c:	89a3      	ldrh	r3, [r4, #12]
 8000b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b26:	81a3      	strh	r3, [r4, #12]
 8000b28:	4632      	mov	r2, r6
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b32:	f000 b8e7 	b.w	8000d04 <_write_r>

08000b36 <__sseek>:
 8000b36:	b510      	push	{r4, lr}
 8000b38:	460c      	mov	r4, r1
 8000b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b3e:	f000 f8bd 	bl	8000cbc <_lseek_r>
 8000b42:	1c43      	adds	r3, r0, #1
 8000b44:	89a3      	ldrh	r3, [r4, #12]
 8000b46:	bf15      	itete	ne
 8000b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8000b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000b52:	81a3      	strheq	r3, [r4, #12]
 8000b54:	bf18      	it	ne
 8000b56:	81a3      	strhne	r3, [r4, #12]
 8000b58:	bd10      	pop	{r4, pc}

08000b5a <__sclose>:
 8000b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b5e:	f000 b89d 	b.w	8000c9c <_close_r>

08000b62 <__swbuf_r>:
 8000b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b64:	460e      	mov	r6, r1
 8000b66:	4614      	mov	r4, r2
 8000b68:	4605      	mov	r5, r0
 8000b6a:	b118      	cbz	r0, 8000b74 <__swbuf_r+0x12>
 8000b6c:	6a03      	ldr	r3, [r0, #32]
 8000b6e:	b90b      	cbnz	r3, 8000b74 <__swbuf_r+0x12>
 8000b70:	f7ff ff6c 	bl	8000a4c <__sinit>
 8000b74:	69a3      	ldr	r3, [r4, #24]
 8000b76:	60a3      	str	r3, [r4, #8]
 8000b78:	89a3      	ldrh	r3, [r4, #12]
 8000b7a:	071a      	lsls	r2, r3, #28
 8000b7c:	d525      	bpl.n	8000bca <__swbuf_r+0x68>
 8000b7e:	6923      	ldr	r3, [r4, #16]
 8000b80:	b31b      	cbz	r3, 8000bca <__swbuf_r+0x68>
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	6922      	ldr	r2, [r4, #16]
 8000b86:	1a98      	subs	r0, r3, r2
 8000b88:	6963      	ldr	r3, [r4, #20]
 8000b8a:	b2f6      	uxtb	r6, r6
 8000b8c:	4283      	cmp	r3, r0
 8000b8e:	4637      	mov	r7, r6
 8000b90:	dc04      	bgt.n	8000b9c <__swbuf_r+0x3a>
 8000b92:	4621      	mov	r1, r4
 8000b94:	4628      	mov	r0, r5
 8000b96:	f000 fd45 	bl	8001624 <_fflush_r>
 8000b9a:	b9e0      	cbnz	r0, 8000bd6 <__swbuf_r+0x74>
 8000b9c:	68a3      	ldr	r3, [r4, #8]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	60a3      	str	r3, [r4, #8]
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	6022      	str	r2, [r4, #0]
 8000ba8:	701e      	strb	r6, [r3, #0]
 8000baa:	6962      	ldr	r2, [r4, #20]
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d004      	beq.n	8000bbc <__swbuf_r+0x5a>
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	07db      	lsls	r3, r3, #31
 8000bb6:	d506      	bpl.n	8000bc6 <__swbuf_r+0x64>
 8000bb8:	2e0a      	cmp	r6, #10
 8000bba:	d104      	bne.n	8000bc6 <__swbuf_r+0x64>
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 fd30 	bl	8001624 <_fflush_r>
 8000bc4:	b938      	cbnz	r0, 8000bd6 <__swbuf_r+0x74>
 8000bc6:	4638      	mov	r0, r7
 8000bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4628      	mov	r0, r5
 8000bce:	f000 f805 	bl	8000bdc <__swsetup_r>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d0d5      	beq.n	8000b82 <__swbuf_r+0x20>
 8000bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8000bda:	e7f4      	b.n	8000bc6 <__swbuf_r+0x64>

08000bdc <__swsetup_r>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <__swsetup_r+0xac>)
 8000be0:	4605      	mov	r5, r0
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	460c      	mov	r4, r1
 8000be6:	b118      	cbz	r0, 8000bf0 <__swsetup_r+0x14>
 8000be8:	6a03      	ldr	r3, [r0, #32]
 8000bea:	b90b      	cbnz	r3, 8000bf0 <__swsetup_r+0x14>
 8000bec:	f7ff ff2e 	bl	8000a4c <__sinit>
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bf6:	0718      	lsls	r0, r3, #28
 8000bf8:	d422      	bmi.n	8000c40 <__swsetup_r+0x64>
 8000bfa:	06d9      	lsls	r1, r3, #27
 8000bfc:	d407      	bmi.n	8000c0e <__swsetup_r+0x32>
 8000bfe:	2309      	movs	r3, #9
 8000c00:	602b      	str	r3, [r5, #0]
 8000c02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c06:	81a3      	strh	r3, [r4, #12]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	e034      	b.n	8000c78 <__swsetup_r+0x9c>
 8000c0e:	0758      	lsls	r0, r3, #29
 8000c10:	d512      	bpl.n	8000c38 <__swsetup_r+0x5c>
 8000c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c14:	b141      	cbz	r1, 8000c28 <__swsetup_r+0x4c>
 8000c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d002      	beq.n	8000c24 <__swsetup_r+0x48>
 8000c1e:	4628      	mov	r0, r5
 8000c20:	f000 f8ae 	bl	8000d80 <_free_r>
 8000c24:	2300      	movs	r3, #0
 8000c26:	6363      	str	r3, [r4, #52]	; 0x34
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c2e:	81a3      	strh	r3, [r4, #12]
 8000c30:	2300      	movs	r3, #0
 8000c32:	6063      	str	r3, [r4, #4]
 8000c34:	6923      	ldr	r3, [r4, #16]
 8000c36:	6023      	str	r3, [r4, #0]
 8000c38:	89a3      	ldrh	r3, [r4, #12]
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	81a3      	strh	r3, [r4, #12]
 8000c40:	6923      	ldr	r3, [r4, #16]
 8000c42:	b94b      	cbnz	r3, 8000c58 <__swsetup_r+0x7c>
 8000c44:	89a3      	ldrh	r3, [r4, #12]
 8000c46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c4e:	d003      	beq.n	8000c58 <__swsetup_r+0x7c>
 8000c50:	4621      	mov	r1, r4
 8000c52:	4628      	mov	r0, r5
 8000c54:	f000 fd34 	bl	80016c0 <__smakebuf_r>
 8000c58:	89a0      	ldrh	r0, [r4, #12]
 8000c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c5e:	f010 0301 	ands.w	r3, r0, #1
 8000c62:	d00a      	beq.n	8000c7a <__swsetup_r+0x9e>
 8000c64:	2300      	movs	r3, #0
 8000c66:	60a3      	str	r3, [r4, #8]
 8000c68:	6963      	ldr	r3, [r4, #20]
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	61a3      	str	r3, [r4, #24]
 8000c6e:	6923      	ldr	r3, [r4, #16]
 8000c70:	b943      	cbnz	r3, 8000c84 <__swsetup_r+0xa8>
 8000c72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c76:	d1c4      	bne.n	8000c02 <__swsetup_r+0x26>
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	0781      	lsls	r1, r0, #30
 8000c7c:	bf58      	it	pl
 8000c7e:	6963      	ldrpl	r3, [r4, #20]
 8000c80:	60a3      	str	r3, [r4, #8]
 8000c82:	e7f4      	b.n	8000c6e <__swsetup_r+0x92>
 8000c84:	2000      	movs	r0, #0
 8000c86:	e7f7      	b.n	8000c78 <__swsetup_r+0x9c>
 8000c88:	20000058 	.word	0x20000058

08000c8c <memset>:
 8000c8c:	4402      	add	r2, r0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d100      	bne.n	8000c96 <memset+0xa>
 8000c94:	4770      	bx	lr
 8000c96:	f803 1b01 	strb.w	r1, [r3], #1
 8000c9a:	e7f9      	b.n	8000c90 <memset+0x4>

08000c9c <_close_r>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4d06      	ldr	r5, [pc, #24]	; (8000cb8 <_close_r+0x1c>)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	602b      	str	r3, [r5, #0]
 8000ca8:	f7ff fd59 	bl	800075e <_close>
 8000cac:	1c43      	adds	r3, r0, #1
 8000cae:	d102      	bne.n	8000cb6 <_close_r+0x1a>
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	b103      	cbz	r3, 8000cb6 <_close_r+0x1a>
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	bd38      	pop	{r3, r4, r5, pc}
 8000cb8:	200001b8 	.word	0x200001b8

08000cbc <_lseek_r>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4d07      	ldr	r5, [pc, #28]	; (8000cdc <_lseek_r+0x20>)
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	602a      	str	r2, [r5, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f7ff fd6e 	bl	80007ac <_lseek>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d102      	bne.n	8000cda <_lseek_r+0x1e>
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	b103      	cbz	r3, 8000cda <_lseek_r+0x1e>
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	200001b8 	.word	0x200001b8

08000ce0 <_read_r>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4d07      	ldr	r5, [pc, #28]	; (8000d00 <_read_r+0x20>)
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4611      	mov	r1, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	602a      	str	r2, [r5, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f7ff fcfc 	bl	80006ec <_read>
 8000cf4:	1c43      	adds	r3, r0, #1
 8000cf6:	d102      	bne.n	8000cfe <_read_r+0x1e>
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	b103      	cbz	r3, 8000cfe <_read_r+0x1e>
 8000cfc:	6023      	str	r3, [r4, #0]
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
 8000d00:	200001b8 	.word	0x200001b8

08000d04 <_write_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4d07      	ldr	r5, [pc, #28]	; (8000d24 <_write_r+0x20>)
 8000d08:	4604      	mov	r4, r0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	2200      	movs	r2, #0
 8000d10:	602a      	str	r2, [r5, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	f7ff fd07 	bl	8000726 <_write>
 8000d18:	1c43      	adds	r3, r0, #1
 8000d1a:	d102      	bne.n	8000d22 <_write_r+0x1e>
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	b103      	cbz	r3, 8000d22 <_write_r+0x1e>
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	200001b8 	.word	0x200001b8

08000d28 <__errno>:
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <__errno+0x8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000058 	.word	0x20000058

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	4d0d      	ldr	r5, [pc, #52]	; (8000d6c <__libc_init_array+0x38>)
 8000d38:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3a:	1b64      	subs	r4, r4, r5
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	2600      	movs	r6, #0
 8000d40:	42a6      	cmp	r6, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	4d0b      	ldr	r5, [pc, #44]	; (8000d74 <__libc_init_array+0x40>)
 8000d46:	4c0c      	ldr	r4, [pc, #48]	; (8000d78 <__libc_init_array+0x44>)
 8000d48:	f000 fd28 	bl	800179c <_init>
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	2600      	movs	r6, #0
 8000d52:	42a6      	cmp	r6, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5c:	4798      	blx	r3
 8000d5e:	3601      	adds	r6, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d66:	4798      	blx	r3
 8000d68:	3601      	adds	r6, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08001a18 	.word	0x08001a18
 8000d70:	08001a18 	.word	0x08001a18
 8000d74:	08001a18 	.word	0x08001a18
 8000d78:	08001a1c 	.word	0x08001a1c

08000d7c <__retarget_lock_acquire_recursive>:
 8000d7c:	4770      	bx	lr

08000d7e <__retarget_lock_release_recursive>:
 8000d7e:	4770      	bx	lr

08000d80 <_free_r>:
 8000d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d044      	beq.n	8000e10 <_free_r+0x90>
 8000d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d8a:	9001      	str	r0, [sp, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d92:	bfb8      	it	lt
 8000d94:	18e4      	addlt	r4, r4, r3
 8000d96:	f000 f8df 	bl	8000f58 <__malloc_lock>
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <_free_r+0x94>)
 8000d9c:	9801      	ldr	r0, [sp, #4]
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	b933      	cbnz	r3, 8000db0 <_free_r+0x30>
 8000da2:	6063      	str	r3, [r4, #4]
 8000da4:	6014      	str	r4, [r2, #0]
 8000da6:	b003      	add	sp, #12
 8000da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dac:	f000 b8da 	b.w	8000f64 <__malloc_unlock>
 8000db0:	42a3      	cmp	r3, r4
 8000db2:	d908      	bls.n	8000dc6 <_free_r+0x46>
 8000db4:	6825      	ldr	r5, [r4, #0]
 8000db6:	1961      	adds	r1, r4, r5
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf01      	itttt	eq
 8000dbc:	6819      	ldreq	r1, [r3, #0]
 8000dbe:	685b      	ldreq	r3, [r3, #4]
 8000dc0:	1949      	addeq	r1, r1, r5
 8000dc2:	6021      	streq	r1, [r4, #0]
 8000dc4:	e7ed      	b.n	8000da2 <_free_r+0x22>
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	b10b      	cbz	r3, 8000dd0 <_free_r+0x50>
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d9fa      	bls.n	8000dc6 <_free_r+0x46>
 8000dd0:	6811      	ldr	r1, [r2, #0]
 8000dd2:	1855      	adds	r5, r2, r1
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	d10b      	bne.n	8000df0 <_free_r+0x70>
 8000dd8:	6824      	ldr	r4, [r4, #0]
 8000dda:	4421      	add	r1, r4
 8000ddc:	1854      	adds	r4, r2, r1
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	6011      	str	r1, [r2, #0]
 8000de2:	d1e0      	bne.n	8000da6 <_free_r+0x26>
 8000de4:	681c      	ldr	r4, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	6053      	str	r3, [r2, #4]
 8000dea:	440c      	add	r4, r1
 8000dec:	6014      	str	r4, [r2, #0]
 8000dee:	e7da      	b.n	8000da6 <_free_r+0x26>
 8000df0:	d902      	bls.n	8000df8 <_free_r+0x78>
 8000df2:	230c      	movs	r3, #12
 8000df4:	6003      	str	r3, [r0, #0]
 8000df6:	e7d6      	b.n	8000da6 <_free_r+0x26>
 8000df8:	6825      	ldr	r5, [r4, #0]
 8000dfa:	1961      	adds	r1, r4, r5
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	bf04      	itt	eq
 8000e00:	6819      	ldreq	r1, [r3, #0]
 8000e02:	685b      	ldreq	r3, [r3, #4]
 8000e04:	6063      	str	r3, [r4, #4]
 8000e06:	bf04      	itt	eq
 8000e08:	1949      	addeq	r1, r1, r5
 8000e0a:	6021      	streq	r1, [r4, #0]
 8000e0c:	6054      	str	r4, [r2, #4]
 8000e0e:	e7ca      	b.n	8000da6 <_free_r+0x26>
 8000e10:	b003      	add	sp, #12
 8000e12:	bd30      	pop	{r4, r5, pc}
 8000e14:	200001c0 	.word	0x200001c0

08000e18 <sbrk_aligned>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4e0e      	ldr	r6, [pc, #56]	; (8000e54 <sbrk_aligned+0x3c>)
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	6831      	ldr	r1, [r6, #0]
 8000e20:	4605      	mov	r5, r0
 8000e22:	b911      	cbnz	r1, 8000e2a <sbrk_aligned+0x12>
 8000e24:	f000 fcaa 	bl	800177c <_sbrk_r>
 8000e28:	6030      	str	r0, [r6, #0]
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f000 fca5 	bl	800177c <_sbrk_r>
 8000e32:	1c43      	adds	r3, r0, #1
 8000e34:	d00a      	beq.n	8000e4c <sbrk_aligned+0x34>
 8000e36:	1cc4      	adds	r4, r0, #3
 8000e38:	f024 0403 	bic.w	r4, r4, #3
 8000e3c:	42a0      	cmp	r0, r4
 8000e3e:	d007      	beq.n	8000e50 <sbrk_aligned+0x38>
 8000e40:	1a21      	subs	r1, r4, r0
 8000e42:	4628      	mov	r0, r5
 8000e44:	f000 fc9a 	bl	800177c <_sbrk_r>
 8000e48:	3001      	adds	r0, #1
 8000e4a:	d101      	bne.n	8000e50 <sbrk_aligned+0x38>
 8000e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e50:	4620      	mov	r0, r4
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	200001c4 	.word	0x200001c4

08000e58 <_malloc_r>:
 8000e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e5c:	1ccd      	adds	r5, r1, #3
 8000e5e:	f025 0503 	bic.w	r5, r5, #3
 8000e62:	3508      	adds	r5, #8
 8000e64:	2d0c      	cmp	r5, #12
 8000e66:	bf38      	it	cc
 8000e68:	250c      	movcc	r5, #12
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	db01      	blt.n	8000e74 <_malloc_r+0x1c>
 8000e70:	42a9      	cmp	r1, r5
 8000e72:	d905      	bls.n	8000e80 <_malloc_r+0x28>
 8000e74:	230c      	movs	r3, #12
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	2600      	movs	r6, #0
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f54 <_malloc_r+0xfc>
 8000e84:	f000 f868 	bl	8000f58 <__malloc_lock>
 8000e88:	f8d8 3000 	ldr.w	r3, [r8]
 8000e8c:	461c      	mov	r4, r3
 8000e8e:	bb5c      	cbnz	r4, 8000ee8 <_malloc_r+0x90>
 8000e90:	4629      	mov	r1, r5
 8000e92:	4638      	mov	r0, r7
 8000e94:	f7ff ffc0 	bl	8000e18 <sbrk_aligned>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	d155      	bne.n	8000f4a <_malloc_r+0xf2>
 8000e9e:	f8d8 4000 	ldr.w	r4, [r8]
 8000ea2:	4626      	mov	r6, r4
 8000ea4:	2e00      	cmp	r6, #0
 8000ea6:	d145      	bne.n	8000f34 <_malloc_r+0xdc>
 8000ea8:	2c00      	cmp	r4, #0
 8000eaa:	d048      	beq.n	8000f3e <_malloc_r+0xe6>
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	eb04 0903 	add.w	r9, r4, r3
 8000eb6:	f000 fc61 	bl	800177c <_sbrk_r>
 8000eba:	4581      	cmp	r9, r0
 8000ebc:	d13f      	bne.n	8000f3e <_malloc_r+0xe6>
 8000ebe:	6821      	ldr	r1, [r4, #0]
 8000ec0:	1a6d      	subs	r5, r5, r1
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	f7ff ffa7 	bl	8000e18 <sbrk_aligned>
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d037      	beq.n	8000f3e <_malloc_r+0xe6>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	442b      	add	r3, r5
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d038      	beq.n	8000f4e <_malloc_r+0xf6>
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	42a2      	cmp	r2, r4
 8000ee0:	d12b      	bne.n	8000f3a <_malloc_r+0xe2>
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	e00f      	b.n	8000f08 <_malloc_r+0xb0>
 8000ee8:	6822      	ldr	r2, [r4, #0]
 8000eea:	1b52      	subs	r2, r2, r5
 8000eec:	d41f      	bmi.n	8000f2e <_malloc_r+0xd6>
 8000eee:	2a0b      	cmp	r2, #11
 8000ef0:	d917      	bls.n	8000f22 <_malloc_r+0xca>
 8000ef2:	1961      	adds	r1, r4, r5
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	6025      	str	r5, [r4, #0]
 8000ef8:	bf18      	it	ne
 8000efa:	6059      	strne	r1, [r3, #4]
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	bf08      	it	eq
 8000f00:	f8c8 1000 	streq.w	r1, [r8]
 8000f04:	5162      	str	r2, [r4, r5]
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	4638      	mov	r0, r7
 8000f0a:	f104 060b 	add.w	r6, r4, #11
 8000f0e:	f000 f829 	bl	8000f64 <__malloc_unlock>
 8000f12:	f026 0607 	bic.w	r6, r6, #7
 8000f16:	1d23      	adds	r3, r4, #4
 8000f18:	1af2      	subs	r2, r6, r3
 8000f1a:	d0ae      	beq.n	8000e7a <_malloc_r+0x22>
 8000f1c:	1b9b      	subs	r3, r3, r6
 8000f1e:	50a3      	str	r3, [r4, r2]
 8000f20:	e7ab      	b.n	8000e7a <_malloc_r+0x22>
 8000f22:	42a3      	cmp	r3, r4
 8000f24:	6862      	ldr	r2, [r4, #4]
 8000f26:	d1dd      	bne.n	8000ee4 <_malloc_r+0x8c>
 8000f28:	f8c8 2000 	str.w	r2, [r8]
 8000f2c:	e7ec      	b.n	8000f08 <_malloc_r+0xb0>
 8000f2e:	4623      	mov	r3, r4
 8000f30:	6864      	ldr	r4, [r4, #4]
 8000f32:	e7ac      	b.n	8000e8e <_malloc_r+0x36>
 8000f34:	4634      	mov	r4, r6
 8000f36:	6876      	ldr	r6, [r6, #4]
 8000f38:	e7b4      	b.n	8000ea4 <_malloc_r+0x4c>
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7cc      	b.n	8000ed8 <_malloc_r+0x80>
 8000f3e:	230c      	movs	r3, #12
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4638      	mov	r0, r7
 8000f44:	f000 f80e 	bl	8000f64 <__malloc_unlock>
 8000f48:	e797      	b.n	8000e7a <_malloc_r+0x22>
 8000f4a:	6025      	str	r5, [r4, #0]
 8000f4c:	e7dc      	b.n	8000f08 <_malloc_r+0xb0>
 8000f4e:	605b      	str	r3, [r3, #4]
 8000f50:	deff      	udf	#255	; 0xff
 8000f52:	bf00      	nop
 8000f54:	200001c0 	.word	0x200001c0

08000f58 <__malloc_lock>:
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <__malloc_lock+0x8>)
 8000f5a:	f7ff bf0f 	b.w	8000d7c <__retarget_lock_acquire_recursive>
 8000f5e:	bf00      	nop
 8000f60:	200001bc 	.word	0x200001bc

08000f64 <__malloc_unlock>:
 8000f64:	4801      	ldr	r0, [pc, #4]	; (8000f6c <__malloc_unlock+0x8>)
 8000f66:	f7ff bf0a 	b.w	8000d7e <__retarget_lock_release_recursive>
 8000f6a:	bf00      	nop
 8000f6c:	200001bc 	.word	0x200001bc

08000f70 <__sfputc_r>:
 8000f70:	6893      	ldr	r3, [r2, #8]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	b410      	push	{r4}
 8000f78:	6093      	str	r3, [r2, #8]
 8000f7a:	da08      	bge.n	8000f8e <__sfputc_r+0x1e>
 8000f7c:	6994      	ldr	r4, [r2, #24]
 8000f7e:	42a3      	cmp	r3, r4
 8000f80:	db01      	blt.n	8000f86 <__sfputc_r+0x16>
 8000f82:	290a      	cmp	r1, #10
 8000f84:	d103      	bne.n	8000f8e <__sfputc_r+0x1e>
 8000f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f8a:	f7ff bdea 	b.w	8000b62 <__swbuf_r>
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	1c58      	adds	r0, r3, #1
 8000f92:	6010      	str	r0, [r2, #0]
 8000f94:	7019      	strb	r1, [r3, #0]
 8000f96:	4608      	mov	r0, r1
 8000f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <__sfputs_r>:
 8000f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	460f      	mov	r7, r1
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	18d5      	adds	r5, r2, r3
 8000fa8:	42ac      	cmp	r4, r5
 8000faa:	d101      	bne.n	8000fb0 <__sfputs_r+0x12>
 8000fac:	2000      	movs	r0, #0
 8000fae:	e007      	b.n	8000fc0 <__sfputs_r+0x22>
 8000fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fb4:	463a      	mov	r2, r7
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff ffda 	bl	8000f70 <__sfputc_r>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	d1f3      	bne.n	8000fa8 <__sfputs_r+0xa>
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fc4 <_vfiprintf_r>:
 8000fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc8:	460d      	mov	r5, r1
 8000fca:	b09d      	sub	sp, #116	; 0x74
 8000fcc:	4614      	mov	r4, r2
 8000fce:	4698      	mov	r8, r3
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	b118      	cbz	r0, 8000fdc <_vfiprintf_r+0x18>
 8000fd4:	6a03      	ldr	r3, [r0, #32]
 8000fd6:	b90b      	cbnz	r3, 8000fdc <_vfiprintf_r+0x18>
 8000fd8:	f7ff fd38 	bl	8000a4c <__sinit>
 8000fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fde:	07d9      	lsls	r1, r3, #31
 8000fe0:	d405      	bmi.n	8000fee <_vfiprintf_r+0x2a>
 8000fe2:	89ab      	ldrh	r3, [r5, #12]
 8000fe4:	059a      	lsls	r2, r3, #22
 8000fe6:	d402      	bmi.n	8000fee <_vfiprintf_r+0x2a>
 8000fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000fea:	f7ff fec7 	bl	8000d7c <__retarget_lock_acquire_recursive>
 8000fee:	89ab      	ldrh	r3, [r5, #12]
 8000ff0:	071b      	lsls	r3, r3, #28
 8000ff2:	d501      	bpl.n	8000ff8 <_vfiprintf_r+0x34>
 8000ff4:	692b      	ldr	r3, [r5, #16]
 8000ff6:	b99b      	cbnz	r3, 8001020 <_vfiprintf_r+0x5c>
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff fdee 	bl	8000bdc <__swsetup_r>
 8001000:	b170      	cbz	r0, 8001020 <_vfiprintf_r+0x5c>
 8001002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001004:	07dc      	lsls	r4, r3, #31
 8001006:	d504      	bpl.n	8001012 <_vfiprintf_r+0x4e>
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	b01d      	add	sp, #116	; 0x74
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	89ab      	ldrh	r3, [r5, #12]
 8001014:	0598      	lsls	r0, r3, #22
 8001016:	d4f7      	bmi.n	8001008 <_vfiprintf_r+0x44>
 8001018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800101a:	f7ff feb0 	bl	8000d7e <__retarget_lock_release_recursive>
 800101e:	e7f3      	b.n	8001008 <_vfiprintf_r+0x44>
 8001020:	2300      	movs	r3, #0
 8001022:	9309      	str	r3, [sp, #36]	; 0x24
 8001024:	2320      	movs	r3, #32
 8001026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800102a:	f8cd 800c 	str.w	r8, [sp, #12]
 800102e:	2330      	movs	r3, #48	; 0x30
 8001030:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80011e4 <_vfiprintf_r+0x220>
 8001034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001038:	f04f 0901 	mov.w	r9, #1
 800103c:	4623      	mov	r3, r4
 800103e:	469a      	mov	sl, r3
 8001040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001044:	b10a      	cbz	r2, 800104a <_vfiprintf_r+0x86>
 8001046:	2a25      	cmp	r2, #37	; 0x25
 8001048:	d1f9      	bne.n	800103e <_vfiprintf_r+0x7a>
 800104a:	ebba 0b04 	subs.w	fp, sl, r4
 800104e:	d00b      	beq.n	8001068 <_vfiprintf_r+0xa4>
 8001050:	465b      	mov	r3, fp
 8001052:	4622      	mov	r2, r4
 8001054:	4629      	mov	r1, r5
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff ffa1 	bl	8000f9e <__sfputs_r>
 800105c:	3001      	adds	r0, #1
 800105e:	f000 80a9 	beq.w	80011b4 <_vfiprintf_r+0x1f0>
 8001062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001064:	445a      	add	r2, fp
 8001066:	9209      	str	r2, [sp, #36]	; 0x24
 8001068:	f89a 3000 	ldrb.w	r3, [sl]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80a1 	beq.w	80011b4 <_vfiprintf_r+0x1f0>
 8001072:	2300      	movs	r3, #0
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800107c:	f10a 0a01 	add.w	sl, sl, #1
 8001080:	9304      	str	r3, [sp, #16]
 8001082:	9307      	str	r3, [sp, #28]
 8001084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001088:	931a      	str	r3, [sp, #104]	; 0x68
 800108a:	4654      	mov	r4, sl
 800108c:	2205      	movs	r2, #5
 800108e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001092:	4854      	ldr	r0, [pc, #336]	; (80011e4 <_vfiprintf_r+0x220>)
 8001094:	f7ff f8bc 	bl	8000210 <memchr>
 8001098:	9a04      	ldr	r2, [sp, #16]
 800109a:	b9d8      	cbnz	r0, 80010d4 <_vfiprintf_r+0x110>
 800109c:	06d1      	lsls	r1, r2, #27
 800109e:	bf44      	itt	mi
 80010a0:	2320      	movmi	r3, #32
 80010a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010a6:	0713      	lsls	r3, r2, #28
 80010a8:	bf44      	itt	mi
 80010aa:	232b      	movmi	r3, #43	; 0x2b
 80010ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010b0:	f89a 3000 	ldrb.w	r3, [sl]
 80010b4:	2b2a      	cmp	r3, #42	; 0x2a
 80010b6:	d015      	beq.n	80010e4 <_vfiprintf_r+0x120>
 80010b8:	9a07      	ldr	r2, [sp, #28]
 80010ba:	4654      	mov	r4, sl
 80010bc:	2000      	movs	r0, #0
 80010be:	f04f 0c0a 	mov.w	ip, #10
 80010c2:	4621      	mov	r1, r4
 80010c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010c8:	3b30      	subs	r3, #48	; 0x30
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	d94d      	bls.n	800116a <_vfiprintf_r+0x1a6>
 80010ce:	b1b0      	cbz	r0, 80010fe <_vfiprintf_r+0x13a>
 80010d0:	9207      	str	r2, [sp, #28]
 80010d2:	e014      	b.n	80010fe <_vfiprintf_r+0x13a>
 80010d4:	eba0 0308 	sub.w	r3, r0, r8
 80010d8:	fa09 f303 	lsl.w	r3, r9, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	9304      	str	r3, [sp, #16]
 80010e0:	46a2      	mov	sl, r4
 80010e2:	e7d2      	b.n	800108a <_vfiprintf_r+0xc6>
 80010e4:	9b03      	ldr	r3, [sp, #12]
 80010e6:	1d19      	adds	r1, r3, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	9103      	str	r1, [sp, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bfbb      	ittet	lt
 80010f0:	425b      	neglt	r3, r3
 80010f2:	f042 0202 	orrlt.w	r2, r2, #2
 80010f6:	9307      	strge	r3, [sp, #28]
 80010f8:	9307      	strlt	r3, [sp, #28]
 80010fa:	bfb8      	it	lt
 80010fc:	9204      	strlt	r2, [sp, #16]
 80010fe:	7823      	ldrb	r3, [r4, #0]
 8001100:	2b2e      	cmp	r3, #46	; 0x2e
 8001102:	d10c      	bne.n	800111e <_vfiprintf_r+0x15a>
 8001104:	7863      	ldrb	r3, [r4, #1]
 8001106:	2b2a      	cmp	r3, #42	; 0x2a
 8001108:	d134      	bne.n	8001174 <_vfiprintf_r+0x1b0>
 800110a:	9b03      	ldr	r3, [sp, #12]
 800110c:	1d1a      	adds	r2, r3, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	9203      	str	r2, [sp, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	bfb8      	it	lt
 8001116:	f04f 33ff 	movlt.w	r3, #4294967295
 800111a:	3402      	adds	r4, #2
 800111c:	9305      	str	r3, [sp, #20]
 800111e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80011f4 <_vfiprintf_r+0x230>
 8001122:	7821      	ldrb	r1, [r4, #0]
 8001124:	2203      	movs	r2, #3
 8001126:	4650      	mov	r0, sl
 8001128:	f7ff f872 	bl	8000210 <memchr>
 800112c:	b138      	cbz	r0, 800113e <_vfiprintf_r+0x17a>
 800112e:	9b04      	ldr	r3, [sp, #16]
 8001130:	eba0 000a 	sub.w	r0, r0, sl
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	4082      	lsls	r2, r0
 8001138:	4313      	orrs	r3, r2
 800113a:	3401      	adds	r4, #1
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001142:	4829      	ldr	r0, [pc, #164]	; (80011e8 <_vfiprintf_r+0x224>)
 8001144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001148:	2206      	movs	r2, #6
 800114a:	f7ff f861 	bl	8000210 <memchr>
 800114e:	2800      	cmp	r0, #0
 8001150:	d03f      	beq.n	80011d2 <_vfiprintf_r+0x20e>
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <_vfiprintf_r+0x228>)
 8001154:	bb1b      	cbnz	r3, 800119e <_vfiprintf_r+0x1da>
 8001156:	9b03      	ldr	r3, [sp, #12]
 8001158:	3307      	adds	r3, #7
 800115a:	f023 0307 	bic.w	r3, r3, #7
 800115e:	3308      	adds	r3, #8
 8001160:	9303      	str	r3, [sp, #12]
 8001162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001164:	443b      	add	r3, r7
 8001166:	9309      	str	r3, [sp, #36]	; 0x24
 8001168:	e768      	b.n	800103c <_vfiprintf_r+0x78>
 800116a:	fb0c 3202 	mla	r2, ip, r2, r3
 800116e:	460c      	mov	r4, r1
 8001170:	2001      	movs	r0, #1
 8001172:	e7a6      	b.n	80010c2 <_vfiprintf_r+0xfe>
 8001174:	2300      	movs	r3, #0
 8001176:	3401      	adds	r4, #1
 8001178:	9305      	str	r3, [sp, #20]
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 0c0a 	mov.w	ip, #10
 8001180:	4620      	mov	r0, r4
 8001182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001186:	3a30      	subs	r2, #48	; 0x30
 8001188:	2a09      	cmp	r2, #9
 800118a:	d903      	bls.n	8001194 <_vfiprintf_r+0x1d0>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0c6      	beq.n	800111e <_vfiprintf_r+0x15a>
 8001190:	9105      	str	r1, [sp, #20]
 8001192:	e7c4      	b.n	800111e <_vfiprintf_r+0x15a>
 8001194:	fb0c 2101 	mla	r1, ip, r1, r2
 8001198:	4604      	mov	r4, r0
 800119a:	2301      	movs	r3, #1
 800119c:	e7f0      	b.n	8001180 <_vfiprintf_r+0x1bc>
 800119e:	ab03      	add	r3, sp, #12
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	462a      	mov	r2, r5
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <_vfiprintf_r+0x22c>)
 80011a6:	a904      	add	r1, sp, #16
 80011a8:	4630      	mov	r0, r6
 80011aa:	f3af 8000 	nop.w
 80011ae:	4607      	mov	r7, r0
 80011b0:	1c78      	adds	r0, r7, #1
 80011b2:	d1d6      	bne.n	8001162 <_vfiprintf_r+0x19e>
 80011b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011b6:	07d9      	lsls	r1, r3, #31
 80011b8:	d405      	bmi.n	80011c6 <_vfiprintf_r+0x202>
 80011ba:	89ab      	ldrh	r3, [r5, #12]
 80011bc:	059a      	lsls	r2, r3, #22
 80011be:	d402      	bmi.n	80011c6 <_vfiprintf_r+0x202>
 80011c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011c2:	f7ff fddc 	bl	8000d7e <__retarget_lock_release_recursive>
 80011c6:	89ab      	ldrh	r3, [r5, #12]
 80011c8:	065b      	lsls	r3, r3, #25
 80011ca:	f53f af1d 	bmi.w	8001008 <_vfiprintf_r+0x44>
 80011ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011d0:	e71c      	b.n	800100c <_vfiprintf_r+0x48>
 80011d2:	ab03      	add	r3, sp, #12
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	462a      	mov	r2, r5
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <_vfiprintf_r+0x22c>)
 80011da:	a904      	add	r1, sp, #16
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 f879 	bl	80012d4 <_printf_i>
 80011e2:	e7e4      	b.n	80011ae <_vfiprintf_r+0x1ea>
 80011e4:	080019e4 	.word	0x080019e4
 80011e8:	080019ee 	.word	0x080019ee
 80011ec:	00000000 	.word	0x00000000
 80011f0:	08000f9f 	.word	0x08000f9f
 80011f4:	080019ea 	.word	0x080019ea

080011f8 <_printf_common>:
 80011f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011fc:	4616      	mov	r6, r2
 80011fe:	4699      	mov	r9, r3
 8001200:	688a      	ldr	r2, [r1, #8]
 8001202:	690b      	ldr	r3, [r1, #16]
 8001204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001208:	4293      	cmp	r3, r2
 800120a:	bfb8      	it	lt
 800120c:	4613      	movlt	r3, r2
 800120e:	6033      	str	r3, [r6, #0]
 8001210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001214:	4607      	mov	r7, r0
 8001216:	460c      	mov	r4, r1
 8001218:	b10a      	cbz	r2, 800121e <_printf_common+0x26>
 800121a:	3301      	adds	r3, #1
 800121c:	6033      	str	r3, [r6, #0]
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	0699      	lsls	r1, r3, #26
 8001222:	bf42      	ittt	mi
 8001224:	6833      	ldrmi	r3, [r6, #0]
 8001226:	3302      	addmi	r3, #2
 8001228:	6033      	strmi	r3, [r6, #0]
 800122a:	6825      	ldr	r5, [r4, #0]
 800122c:	f015 0506 	ands.w	r5, r5, #6
 8001230:	d106      	bne.n	8001240 <_printf_common+0x48>
 8001232:	f104 0a19 	add.w	sl, r4, #25
 8001236:	68e3      	ldr	r3, [r4, #12]
 8001238:	6832      	ldr	r2, [r6, #0]
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	42ab      	cmp	r3, r5
 800123e:	dc26      	bgt.n	800128e <_printf_common+0x96>
 8001240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001244:	1e13      	subs	r3, r2, #0
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	bf18      	it	ne
 800124a:	2301      	movne	r3, #1
 800124c:	0692      	lsls	r2, r2, #26
 800124e:	d42b      	bmi.n	80012a8 <_printf_common+0xb0>
 8001250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001254:	4649      	mov	r1, r9
 8001256:	4638      	mov	r0, r7
 8001258:	47c0      	blx	r8
 800125a:	3001      	adds	r0, #1
 800125c:	d01e      	beq.n	800129c <_printf_common+0xa4>
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	6922      	ldr	r2, [r4, #16]
 8001262:	f003 0306 	and.w	r3, r3, #6
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf02      	ittt	eq
 800126a:	68e5      	ldreq	r5, [r4, #12]
 800126c:	6833      	ldreq	r3, [r6, #0]
 800126e:	1aed      	subeq	r5, r5, r3
 8001270:	68a3      	ldr	r3, [r4, #8]
 8001272:	bf0c      	ite	eq
 8001274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001278:	2500      	movne	r5, #0
 800127a:	4293      	cmp	r3, r2
 800127c:	bfc4      	itt	gt
 800127e:	1a9b      	subgt	r3, r3, r2
 8001280:	18ed      	addgt	r5, r5, r3
 8001282:	2600      	movs	r6, #0
 8001284:	341a      	adds	r4, #26
 8001286:	42b5      	cmp	r5, r6
 8001288:	d11a      	bne.n	80012c0 <_printf_common+0xc8>
 800128a:	2000      	movs	r0, #0
 800128c:	e008      	b.n	80012a0 <_printf_common+0xa8>
 800128e:	2301      	movs	r3, #1
 8001290:	4652      	mov	r2, sl
 8001292:	4649      	mov	r1, r9
 8001294:	4638      	mov	r0, r7
 8001296:	47c0      	blx	r8
 8001298:	3001      	adds	r0, #1
 800129a:	d103      	bne.n	80012a4 <_printf_common+0xac>
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a4:	3501      	adds	r5, #1
 80012a6:	e7c6      	b.n	8001236 <_printf_common+0x3e>
 80012a8:	18e1      	adds	r1, r4, r3
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	2030      	movs	r0, #48	; 0x30
 80012ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012b2:	4422      	add	r2, r4
 80012b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012bc:	3302      	adds	r3, #2
 80012be:	e7c7      	b.n	8001250 <_printf_common+0x58>
 80012c0:	2301      	movs	r3, #1
 80012c2:	4622      	mov	r2, r4
 80012c4:	4649      	mov	r1, r9
 80012c6:	4638      	mov	r0, r7
 80012c8:	47c0      	blx	r8
 80012ca:	3001      	adds	r0, #1
 80012cc:	d0e6      	beq.n	800129c <_printf_common+0xa4>
 80012ce:	3601      	adds	r6, #1
 80012d0:	e7d9      	b.n	8001286 <_printf_common+0x8e>
	...

080012d4 <_printf_i>:
 80012d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012d8:	7e0f      	ldrb	r7, [r1, #24]
 80012da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80012dc:	2f78      	cmp	r7, #120	; 0x78
 80012de:	4691      	mov	r9, r2
 80012e0:	4680      	mov	r8, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	469a      	mov	sl, r3
 80012e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80012ea:	d807      	bhi.n	80012fc <_printf_i+0x28>
 80012ec:	2f62      	cmp	r7, #98	; 0x62
 80012ee:	d80a      	bhi.n	8001306 <_printf_i+0x32>
 80012f0:	2f00      	cmp	r7, #0
 80012f2:	f000 80d4 	beq.w	800149e <_printf_i+0x1ca>
 80012f6:	2f58      	cmp	r7, #88	; 0x58
 80012f8:	f000 80c0 	beq.w	800147c <_printf_i+0x1a8>
 80012fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001304:	e03a      	b.n	800137c <_printf_i+0xa8>
 8001306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800130a:	2b15      	cmp	r3, #21
 800130c:	d8f6      	bhi.n	80012fc <_printf_i+0x28>
 800130e:	a101      	add	r1, pc, #4	; (adr r1, 8001314 <_printf_i+0x40>)
 8001310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001314:	0800136d 	.word	0x0800136d
 8001318:	08001381 	.word	0x08001381
 800131c:	080012fd 	.word	0x080012fd
 8001320:	080012fd 	.word	0x080012fd
 8001324:	080012fd 	.word	0x080012fd
 8001328:	080012fd 	.word	0x080012fd
 800132c:	08001381 	.word	0x08001381
 8001330:	080012fd 	.word	0x080012fd
 8001334:	080012fd 	.word	0x080012fd
 8001338:	080012fd 	.word	0x080012fd
 800133c:	080012fd 	.word	0x080012fd
 8001340:	08001485 	.word	0x08001485
 8001344:	080013ad 	.word	0x080013ad
 8001348:	0800143f 	.word	0x0800143f
 800134c:	080012fd 	.word	0x080012fd
 8001350:	080012fd 	.word	0x080012fd
 8001354:	080014a7 	.word	0x080014a7
 8001358:	080012fd 	.word	0x080012fd
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080012fd 	.word	0x080012fd
 8001364:	080012fd 	.word	0x080012fd
 8001368:	08001447 	.word	0x08001447
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	602a      	str	r2, [r5, #0]
 8001374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800137c:	2301      	movs	r3, #1
 800137e:	e09f      	b.n	80014c0 <_printf_i+0x1ec>
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	0607      	lsls	r7, r0, #24
 8001386:	f103 0104 	add.w	r1, r3, #4
 800138a:	6029      	str	r1, [r5, #0]
 800138c:	d501      	bpl.n	8001392 <_printf_i+0xbe>
 800138e:	681e      	ldr	r6, [r3, #0]
 8001390:	e003      	b.n	800139a <_printf_i+0xc6>
 8001392:	0646      	lsls	r6, r0, #25
 8001394:	d5fb      	bpl.n	800138e <_printf_i+0xba>
 8001396:	f9b3 6000 	ldrsh.w	r6, [r3]
 800139a:	2e00      	cmp	r6, #0
 800139c:	da03      	bge.n	80013a6 <_printf_i+0xd2>
 800139e:	232d      	movs	r3, #45	; 0x2d
 80013a0:	4276      	negs	r6, r6
 80013a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013a6:	485a      	ldr	r0, [pc, #360]	; (8001510 <_printf_i+0x23c>)
 80013a8:	230a      	movs	r3, #10
 80013aa:	e012      	b.n	80013d2 <_printf_i+0xfe>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	6820      	ldr	r0, [r4, #0]
 80013b0:	1d19      	adds	r1, r3, #4
 80013b2:	6029      	str	r1, [r5, #0]
 80013b4:	0605      	lsls	r5, r0, #24
 80013b6:	d501      	bpl.n	80013bc <_printf_i+0xe8>
 80013b8:	681e      	ldr	r6, [r3, #0]
 80013ba:	e002      	b.n	80013c2 <_printf_i+0xee>
 80013bc:	0641      	lsls	r1, r0, #25
 80013be:	d5fb      	bpl.n	80013b8 <_printf_i+0xe4>
 80013c0:	881e      	ldrh	r6, [r3, #0]
 80013c2:	4853      	ldr	r0, [pc, #332]	; (8001510 <_printf_i+0x23c>)
 80013c4:	2f6f      	cmp	r7, #111	; 0x6f
 80013c6:	bf0c      	ite	eq
 80013c8:	2308      	moveq	r3, #8
 80013ca:	230a      	movne	r3, #10
 80013cc:	2100      	movs	r1, #0
 80013ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80013d2:	6865      	ldr	r5, [r4, #4]
 80013d4:	60a5      	str	r5, [r4, #8]
 80013d6:	2d00      	cmp	r5, #0
 80013d8:	bfa2      	ittt	ge
 80013da:	6821      	ldrge	r1, [r4, #0]
 80013dc:	f021 0104 	bicge.w	r1, r1, #4
 80013e0:	6021      	strge	r1, [r4, #0]
 80013e2:	b90e      	cbnz	r6, 80013e8 <_printf_i+0x114>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d04b      	beq.n	8001480 <_printf_i+0x1ac>
 80013e8:	4615      	mov	r5, r2
 80013ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80013ee:	fb03 6711 	mls	r7, r3, r1, r6
 80013f2:	5dc7      	ldrb	r7, [r0, r7]
 80013f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80013f8:	4637      	mov	r7, r6
 80013fa:	42bb      	cmp	r3, r7
 80013fc:	460e      	mov	r6, r1
 80013fe:	d9f4      	bls.n	80013ea <_printf_i+0x116>
 8001400:	2b08      	cmp	r3, #8
 8001402:	d10b      	bne.n	800141c <_printf_i+0x148>
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	07de      	lsls	r6, r3, #31
 8001408:	d508      	bpl.n	800141c <_printf_i+0x148>
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	6861      	ldr	r1, [r4, #4]
 800140e:	4299      	cmp	r1, r3
 8001410:	bfde      	ittt	le
 8001412:	2330      	movle	r3, #48	; 0x30
 8001414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800141c:	1b52      	subs	r2, r2, r5
 800141e:	6122      	str	r2, [r4, #16]
 8001420:	f8cd a000 	str.w	sl, [sp]
 8001424:	464b      	mov	r3, r9
 8001426:	aa03      	add	r2, sp, #12
 8001428:	4621      	mov	r1, r4
 800142a:	4640      	mov	r0, r8
 800142c:	f7ff fee4 	bl	80011f8 <_printf_common>
 8001430:	3001      	adds	r0, #1
 8001432:	d14a      	bne.n	80014ca <_printf_i+0x1f6>
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	b004      	add	sp, #16
 800143a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	4833      	ldr	r0, [pc, #204]	; (8001514 <_printf_i+0x240>)
 8001448:	2778      	movs	r7, #120	; 0x78
 800144a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	6829      	ldr	r1, [r5, #0]
 8001452:	061f      	lsls	r7, r3, #24
 8001454:	f851 6b04 	ldr.w	r6, [r1], #4
 8001458:	d402      	bmi.n	8001460 <_printf_i+0x18c>
 800145a:	065f      	lsls	r7, r3, #25
 800145c:	bf48      	it	mi
 800145e:	b2b6      	uxthmi	r6, r6
 8001460:	07df      	lsls	r7, r3, #31
 8001462:	bf48      	it	mi
 8001464:	f043 0320 	orrmi.w	r3, r3, #32
 8001468:	6029      	str	r1, [r5, #0]
 800146a:	bf48      	it	mi
 800146c:	6023      	strmi	r3, [r4, #0]
 800146e:	b91e      	cbnz	r6, 8001478 <_printf_i+0x1a4>
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	f023 0320 	bic.w	r3, r3, #32
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	2310      	movs	r3, #16
 800147a:	e7a7      	b.n	80013cc <_printf_i+0xf8>
 800147c:	4824      	ldr	r0, [pc, #144]	; (8001510 <_printf_i+0x23c>)
 800147e:	e7e4      	b.n	800144a <_printf_i+0x176>
 8001480:	4615      	mov	r5, r2
 8001482:	e7bd      	b.n	8001400 <_printf_i+0x12c>
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	6826      	ldr	r6, [r4, #0]
 8001488:	6961      	ldr	r1, [r4, #20]
 800148a:	1d18      	adds	r0, r3, #4
 800148c:	6028      	str	r0, [r5, #0]
 800148e:	0635      	lsls	r5, r6, #24
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	d501      	bpl.n	8001498 <_printf_i+0x1c4>
 8001494:	6019      	str	r1, [r3, #0]
 8001496:	e002      	b.n	800149e <_printf_i+0x1ca>
 8001498:	0670      	lsls	r0, r6, #25
 800149a:	d5fb      	bpl.n	8001494 <_printf_i+0x1c0>
 800149c:	8019      	strh	r1, [r3, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	6123      	str	r3, [r4, #16]
 80014a2:	4615      	mov	r5, r2
 80014a4:	e7bc      	b.n	8001420 <_printf_i+0x14c>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	1d1a      	adds	r2, r3, #4
 80014aa:	602a      	str	r2, [r5, #0]
 80014ac:	681d      	ldr	r5, [r3, #0]
 80014ae:	6862      	ldr	r2, [r4, #4]
 80014b0:	2100      	movs	r1, #0
 80014b2:	4628      	mov	r0, r5
 80014b4:	f7fe feac 	bl	8000210 <memchr>
 80014b8:	b108      	cbz	r0, 80014be <_printf_i+0x1ea>
 80014ba:	1b40      	subs	r0, r0, r5
 80014bc:	6060      	str	r0, [r4, #4]
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	6123      	str	r3, [r4, #16]
 80014c2:	2300      	movs	r3, #0
 80014c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014c8:	e7aa      	b.n	8001420 <_printf_i+0x14c>
 80014ca:	6923      	ldr	r3, [r4, #16]
 80014cc:	462a      	mov	r2, r5
 80014ce:	4649      	mov	r1, r9
 80014d0:	4640      	mov	r0, r8
 80014d2:	47d0      	blx	sl
 80014d4:	3001      	adds	r0, #1
 80014d6:	d0ad      	beq.n	8001434 <_printf_i+0x160>
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	079b      	lsls	r3, r3, #30
 80014dc:	d413      	bmi.n	8001506 <_printf_i+0x232>
 80014de:	68e0      	ldr	r0, [r4, #12]
 80014e0:	9b03      	ldr	r3, [sp, #12]
 80014e2:	4298      	cmp	r0, r3
 80014e4:	bfb8      	it	lt
 80014e6:	4618      	movlt	r0, r3
 80014e8:	e7a6      	b.n	8001438 <_printf_i+0x164>
 80014ea:	2301      	movs	r3, #1
 80014ec:	4632      	mov	r2, r6
 80014ee:	4649      	mov	r1, r9
 80014f0:	4640      	mov	r0, r8
 80014f2:	47d0      	blx	sl
 80014f4:	3001      	adds	r0, #1
 80014f6:	d09d      	beq.n	8001434 <_printf_i+0x160>
 80014f8:	3501      	adds	r5, #1
 80014fa:	68e3      	ldr	r3, [r4, #12]
 80014fc:	9903      	ldr	r1, [sp, #12]
 80014fe:	1a5b      	subs	r3, r3, r1
 8001500:	42ab      	cmp	r3, r5
 8001502:	dcf2      	bgt.n	80014ea <_printf_i+0x216>
 8001504:	e7eb      	b.n	80014de <_printf_i+0x20a>
 8001506:	2500      	movs	r5, #0
 8001508:	f104 0619 	add.w	r6, r4, #25
 800150c:	e7f5      	b.n	80014fa <_printf_i+0x226>
 800150e:	bf00      	nop
 8001510:	080019f5 	.word	0x080019f5
 8001514:	08001a06 	.word	0x08001a06

08001518 <__sflush_r>:
 8001518:	898a      	ldrh	r2, [r1, #12]
 800151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151e:	4605      	mov	r5, r0
 8001520:	0710      	lsls	r0, r2, #28
 8001522:	460c      	mov	r4, r1
 8001524:	d458      	bmi.n	80015d8 <__sflush_r+0xc0>
 8001526:	684b      	ldr	r3, [r1, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dc05      	bgt.n	8001538 <__sflush_r+0x20>
 800152c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	dc02      	bgt.n	8001538 <__sflush_r+0x20>
 8001532:	2000      	movs	r0, #0
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800153a:	2e00      	cmp	r6, #0
 800153c:	d0f9      	beq.n	8001532 <__sflush_r+0x1a>
 800153e:	2300      	movs	r3, #0
 8001540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001544:	682f      	ldr	r7, [r5, #0]
 8001546:	6a21      	ldr	r1, [r4, #32]
 8001548:	602b      	str	r3, [r5, #0]
 800154a:	d032      	beq.n	80015b2 <__sflush_r+0x9a>
 800154c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800154e:	89a3      	ldrh	r3, [r4, #12]
 8001550:	075a      	lsls	r2, r3, #29
 8001552:	d505      	bpl.n	8001560 <__sflush_r+0x48>
 8001554:	6863      	ldr	r3, [r4, #4]
 8001556:	1ac0      	subs	r0, r0, r3
 8001558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800155a:	b10b      	cbz	r3, 8001560 <__sflush_r+0x48>
 800155c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800155e:	1ac0      	subs	r0, r0, r3
 8001560:	2300      	movs	r3, #0
 8001562:	4602      	mov	r2, r0
 8001564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001566:	6a21      	ldr	r1, [r4, #32]
 8001568:	4628      	mov	r0, r5
 800156a:	47b0      	blx	r6
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	89a3      	ldrh	r3, [r4, #12]
 8001570:	d106      	bne.n	8001580 <__sflush_r+0x68>
 8001572:	6829      	ldr	r1, [r5, #0]
 8001574:	291d      	cmp	r1, #29
 8001576:	d82b      	bhi.n	80015d0 <__sflush_r+0xb8>
 8001578:	4a29      	ldr	r2, [pc, #164]	; (8001620 <__sflush_r+0x108>)
 800157a:	410a      	asrs	r2, r1
 800157c:	07d6      	lsls	r6, r2, #31
 800157e:	d427      	bmi.n	80015d0 <__sflush_r+0xb8>
 8001580:	2200      	movs	r2, #0
 8001582:	6062      	str	r2, [r4, #4]
 8001584:	04d9      	lsls	r1, r3, #19
 8001586:	6922      	ldr	r2, [r4, #16]
 8001588:	6022      	str	r2, [r4, #0]
 800158a:	d504      	bpl.n	8001596 <__sflush_r+0x7e>
 800158c:	1c42      	adds	r2, r0, #1
 800158e:	d101      	bne.n	8001594 <__sflush_r+0x7c>
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	b903      	cbnz	r3, 8001596 <__sflush_r+0x7e>
 8001594:	6560      	str	r0, [r4, #84]	; 0x54
 8001596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001598:	602f      	str	r7, [r5, #0]
 800159a:	2900      	cmp	r1, #0
 800159c:	d0c9      	beq.n	8001532 <__sflush_r+0x1a>
 800159e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015a2:	4299      	cmp	r1, r3
 80015a4:	d002      	beq.n	80015ac <__sflush_r+0x94>
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fbea 	bl	8000d80 <_free_r>
 80015ac:	2000      	movs	r0, #0
 80015ae:	6360      	str	r0, [r4, #52]	; 0x34
 80015b0:	e7c0      	b.n	8001534 <__sflush_r+0x1c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	4628      	mov	r0, r5
 80015b6:	47b0      	blx	r6
 80015b8:	1c41      	adds	r1, r0, #1
 80015ba:	d1c8      	bne.n	800154e <__sflush_r+0x36>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0c5      	beq.n	800154e <__sflush_r+0x36>
 80015c2:	2b1d      	cmp	r3, #29
 80015c4:	d001      	beq.n	80015ca <__sflush_r+0xb2>
 80015c6:	2b16      	cmp	r3, #22
 80015c8:	d101      	bne.n	80015ce <__sflush_r+0xb6>
 80015ca:	602f      	str	r7, [r5, #0]
 80015cc:	e7b1      	b.n	8001532 <__sflush_r+0x1a>
 80015ce:	89a3      	ldrh	r3, [r4, #12]
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	81a3      	strh	r3, [r4, #12]
 80015d6:	e7ad      	b.n	8001534 <__sflush_r+0x1c>
 80015d8:	690f      	ldr	r7, [r1, #16]
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d0a9      	beq.n	8001532 <__sflush_r+0x1a>
 80015de:	0793      	lsls	r3, r2, #30
 80015e0:	680e      	ldr	r6, [r1, #0]
 80015e2:	bf08      	it	eq
 80015e4:	694b      	ldreq	r3, [r1, #20]
 80015e6:	600f      	str	r7, [r1, #0]
 80015e8:	bf18      	it	ne
 80015ea:	2300      	movne	r3, #0
 80015ec:	eba6 0807 	sub.w	r8, r6, r7
 80015f0:	608b      	str	r3, [r1, #8]
 80015f2:	f1b8 0f00 	cmp.w	r8, #0
 80015f6:	dd9c      	ble.n	8001532 <__sflush_r+0x1a>
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015fc:	4643      	mov	r3, r8
 80015fe:	463a      	mov	r2, r7
 8001600:	4628      	mov	r0, r5
 8001602:	47b0      	blx	r6
 8001604:	2800      	cmp	r0, #0
 8001606:	dc06      	bgt.n	8001616 <__sflush_r+0xfe>
 8001608:	89a3      	ldrh	r3, [r4, #12]
 800160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160e:	81a3      	strh	r3, [r4, #12]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	e78e      	b.n	8001534 <__sflush_r+0x1c>
 8001616:	4407      	add	r7, r0
 8001618:	eba8 0800 	sub.w	r8, r8, r0
 800161c:	e7e9      	b.n	80015f2 <__sflush_r+0xda>
 800161e:	bf00      	nop
 8001620:	dfbffffe 	.word	0xdfbffffe

08001624 <_fflush_r>:
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	690b      	ldr	r3, [r1, #16]
 8001628:	4605      	mov	r5, r0
 800162a:	460c      	mov	r4, r1
 800162c:	b913      	cbnz	r3, 8001634 <_fflush_r+0x10>
 800162e:	2500      	movs	r5, #0
 8001630:	4628      	mov	r0, r5
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	b118      	cbz	r0, 800163e <_fflush_r+0x1a>
 8001636:	6a03      	ldr	r3, [r0, #32]
 8001638:	b90b      	cbnz	r3, 800163e <_fflush_r+0x1a>
 800163a:	f7ff fa07 	bl	8000a4c <__sinit>
 800163e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f3      	beq.n	800162e <_fflush_r+0xa>
 8001646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001648:	07d0      	lsls	r0, r2, #31
 800164a:	d404      	bmi.n	8001656 <_fflush_r+0x32>
 800164c:	0599      	lsls	r1, r3, #22
 800164e:	d402      	bmi.n	8001656 <_fflush_r+0x32>
 8001650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001652:	f7ff fb93 	bl	8000d7c <__retarget_lock_acquire_recursive>
 8001656:	4628      	mov	r0, r5
 8001658:	4621      	mov	r1, r4
 800165a:	f7ff ff5d 	bl	8001518 <__sflush_r>
 800165e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001660:	07da      	lsls	r2, r3, #31
 8001662:	4605      	mov	r5, r0
 8001664:	d4e4      	bmi.n	8001630 <_fflush_r+0xc>
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	059b      	lsls	r3, r3, #22
 800166a:	d4e1      	bmi.n	8001630 <_fflush_r+0xc>
 800166c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800166e:	f7ff fb86 	bl	8000d7e <__retarget_lock_release_recursive>
 8001672:	e7dd      	b.n	8001630 <_fflush_r+0xc>

08001674 <__swhatbuf_r>:
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	460c      	mov	r4, r1
 8001678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800167c:	2900      	cmp	r1, #0
 800167e:	b096      	sub	sp, #88	; 0x58
 8001680:	4615      	mov	r5, r2
 8001682:	461e      	mov	r6, r3
 8001684:	da0d      	bge.n	80016a2 <__swhatbuf_r+0x2e>
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	f013 0f80 	tst.w	r3, #128	; 0x80
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	bf0c      	ite	eq
 8001692:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001696:	2340      	movne	r3, #64	; 0x40
 8001698:	2000      	movs	r0, #0
 800169a:	6031      	str	r1, [r6, #0]
 800169c:	602b      	str	r3, [r5, #0]
 800169e:	b016      	add	sp, #88	; 0x58
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	466a      	mov	r2, sp
 80016a4:	f000 f848 	bl	8001738 <_fstat_r>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	dbec      	blt.n	8001686 <__swhatbuf_r+0x12>
 80016ac:	9901      	ldr	r1, [sp, #4]
 80016ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80016b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80016b6:	4259      	negs	r1, r3
 80016b8:	4159      	adcs	r1, r3
 80016ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016be:	e7eb      	b.n	8001698 <__swhatbuf_r+0x24>

080016c0 <__smakebuf_r>:
 80016c0:	898b      	ldrh	r3, [r1, #12]
 80016c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016c4:	079d      	lsls	r5, r3, #30
 80016c6:	4606      	mov	r6, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	d507      	bpl.n	80016dc <__smakebuf_r+0x1c>
 80016cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	6123      	str	r3, [r4, #16]
 80016d4:	2301      	movs	r3, #1
 80016d6:	6163      	str	r3, [r4, #20]
 80016d8:	b002      	add	sp, #8
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	ab01      	add	r3, sp, #4
 80016de:	466a      	mov	r2, sp
 80016e0:	f7ff ffc8 	bl	8001674 <__swhatbuf_r>
 80016e4:	9900      	ldr	r1, [sp, #0]
 80016e6:	4605      	mov	r5, r0
 80016e8:	4630      	mov	r0, r6
 80016ea:	f7ff fbb5 	bl	8000e58 <_malloc_r>
 80016ee:	b948      	cbnz	r0, 8001704 <__smakebuf_r+0x44>
 80016f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016f4:	059a      	lsls	r2, r3, #22
 80016f6:	d4ef      	bmi.n	80016d8 <__smakebuf_r+0x18>
 80016f8:	f023 0303 	bic.w	r3, r3, #3
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	81a3      	strh	r3, [r4, #12]
 8001702:	e7e3      	b.n	80016cc <__smakebuf_r+0xc>
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	6020      	str	r0, [r4, #0]
 8001708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170c:	81a3      	strh	r3, [r4, #12]
 800170e:	9b00      	ldr	r3, [sp, #0]
 8001710:	6163      	str	r3, [r4, #20]
 8001712:	9b01      	ldr	r3, [sp, #4]
 8001714:	6120      	str	r0, [r4, #16]
 8001716:	b15b      	cbz	r3, 8001730 <__smakebuf_r+0x70>
 8001718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800171c:	4630      	mov	r0, r6
 800171e:	f000 f81d 	bl	800175c <_isatty_r>
 8001722:	b128      	cbz	r0, 8001730 <__smakebuf_r+0x70>
 8001724:	89a3      	ldrh	r3, [r4, #12]
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	81a3      	strh	r3, [r4, #12]
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	431d      	orrs	r5, r3
 8001734:	81a5      	strh	r5, [r4, #12]
 8001736:	e7cf      	b.n	80016d8 <__smakebuf_r+0x18>

08001738 <_fstat_r>:
 8001738:	b538      	push	{r3, r4, r5, lr}
 800173a:	4d07      	ldr	r5, [pc, #28]	; (8001758 <_fstat_r+0x20>)
 800173c:	2300      	movs	r3, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	602b      	str	r3, [r5, #0]
 8001746:	f7ff f816 	bl	8000776 <_fstat>
 800174a:	1c43      	adds	r3, r0, #1
 800174c:	d102      	bne.n	8001754 <_fstat_r+0x1c>
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	b103      	cbz	r3, 8001754 <_fstat_r+0x1c>
 8001752:	6023      	str	r3, [r4, #0]
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	200001b8 	.word	0x200001b8

0800175c <_isatty_r>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4d06      	ldr	r5, [pc, #24]	; (8001778 <_isatty_r+0x1c>)
 8001760:	2300      	movs	r3, #0
 8001762:	4604      	mov	r4, r0
 8001764:	4608      	mov	r0, r1
 8001766:	602b      	str	r3, [r5, #0]
 8001768:	f7ff f815 	bl	8000796 <_isatty>
 800176c:	1c43      	adds	r3, r0, #1
 800176e:	d102      	bne.n	8001776 <_isatty_r+0x1a>
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	b103      	cbz	r3, 8001776 <_isatty_r+0x1a>
 8001774:	6023      	str	r3, [r4, #0]
 8001776:	bd38      	pop	{r3, r4, r5, pc}
 8001778:	200001b8 	.word	0x200001b8

0800177c <_sbrk_r>:
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	4d06      	ldr	r5, [pc, #24]	; (8001798 <_sbrk_r+0x1c>)
 8001780:	2300      	movs	r3, #0
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	602b      	str	r3, [r5, #0]
 8001788:	f7ff f81e 	bl	80007c8 <_sbrk>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_sbrk_r+0x1a>
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	b103      	cbz	r3, 8001796 <_sbrk_r+0x1a>
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	200001b8 	.word	0x200001b8

0800179c <_init>:
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179e:	bf00      	nop
 80017a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a2:	bc08      	pop	{r3}
 80017a4:	469e      	mov	lr, r3
 80017a6:	4770      	bx	lr

080017a8 <_fini>:
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	bf00      	nop
 80017ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ae:	bc08      	pop	{r3}
 80017b0:	469e      	mov	lr, r3
 80017b2:	4770      	bx	lr
