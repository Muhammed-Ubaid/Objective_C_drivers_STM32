
Objective_C_GPIO_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800040c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000739  00000000  00000000  0001047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000241  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00010e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000076  00000000  00000000  00010eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001143  00000000  00000000  00010f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a73  00000000  00000000  00012069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004460  00000000  00000000  00012adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001cc  00000000  00000000  00016f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00017108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003ec 	.word	0x080003ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003ec 	.word	0x080003ec

08000204 <main>:



GPIO_InitTypeDef		myGPIO_InitSruct;

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

  myGPIO_InitSruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <main+0x44>)
 800020c:	2201      	movs	r2, #1
 800020e:	605a      	str	r2, [r3, #4]
  myGPIO_InitSruct.Pin  = GPIO_PIN_5;
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <main+0x44>)
 8000212:	2220      	movs	r2, #32
 8000214:	601a      	str	r2, [r3, #0]
	myGPIO_InitSruct.Pull	= GPIO_NOPULL;
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <main+0x44>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]

	__LIB_RCC_GPIOA_CLK_ENABLE();
 800021c:	f000 f888 	bl	8000330 <__LIB_RCC_GPIOA_CLK_ENABLE>
	LIB_GPIO_Init(GPIOA,&myGPIO_InitSruct);
 8000220:	4909      	ldr	r1, [pc, #36]	; (8000248 <main+0x44>)
 8000222:	480a      	ldr	r0, [pc, #40]	; (800024c <main+0x48>)
 8000224:	f000 f816 	bl	8000254 <LIB_GPIO_Init>

	while(1){
	   for(int i =0;i< 900000;i++){}
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	e002      	b.n	8000234 <main+0x30>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <main+0x4c>)
 8000238:	4293      	cmp	r3, r2
 800023a:	ddf8      	ble.n	800022e <main+0x2a>
		 LIB_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800023c:	2120      	movs	r1, #32
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <main+0x48>)
 8000240:	f000 f863 	bl	800030a <LIB_GPIO_TogglePin>
	   for(int i =0;i< 900000;i++){}
 8000244:	e7f0      	b.n	8000228 <main+0x24>
 8000246:	bf00      	nop
 8000248:	2000001c 	.word	0x2000001c
 800024c:	40020000 	.word	0x40020000
 8000250:	000dbb9f 	.word	0x000dbb9f

08000254 <LIB_GPIO_Init>:
#define GPIO_NUMBER							16U
#define	GPIO_MODER_MODE0			0x3U<<0
#define	GPIO_MODE							0x03U
#define	GPIO_PUPDR_PUPDR0			0x3U<<0

void LIB_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_InitTypeDef *GPIO_Init){
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]

 uint32_t position;
 uint32_t temp =  0x0U;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
 uint32_t ioposition = 0x00U;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
 uint32_t iocurrent =  0x00U;
 8000266:	2300      	movs	r3, #0
 8000268:	60bb      	str	r3, [r7, #8]

	for(position =0U; position <GPIO_NUMBER;position++){
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	e042      	b.n	80002f6 <LIB_GPIO_Init+0xa2>

		ioposition = 0x01U << position;
 8000270:	2201      	movs	r2, #1
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	60fb      	str	r3, [r7, #12]
		iocurrent =  (uint32_t)(GPIO_Init->Pin)&ioposition;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]

		if(iocurrent == ioposition){
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	429a      	cmp	r2, r3
 800028a:	d131      	bne.n	80002f0 <LIB_GPIO_Init+0x9c>

		 temp  =  GPIOx->MODER;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	613b      	str	r3, [r7, #16]
		 temp &=~(GPIO_MODER_MODE0 <<(position * 2U));
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	2203      	movs	r2, #3
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	693a      	ldr	r2, [r7, #16]
 80002a0:	4013      	ands	r3, r2
 80002a2:	613b      	str	r3, [r7, #16]
		 temp |=(GPIO_Init->Mode & GPIO_MODE) <<(position *2U);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	f003 0203 	and.w	r2, r3, #3
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	fa02 f303 	lsl.w	r3, r2, r3
 80002b4:	693a      	ldr	r2, [r7, #16]
 80002b6:	4313      	orrs	r3, r2
 80002b8:	613b      	str	r3, [r7, #16]
		 GPIOx->MODER =  temp;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	693a      	ldr	r2, [r7, #16]
 80002be:	601a      	str	r2, [r3, #0]

		 temp  =  GPIOx->PUPDR;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	613b      	str	r3, [r7, #16]
		 temp &=~(GPIO_PUPDR_PUPDR0 <<(position * 2U));
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2203      	movs	r2, #3
 80002cc:	fa02 f303 	lsl.w	r3, r2, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	693a      	ldr	r2, [r7, #16]
 80002d4:	4013      	ands	r3, r2
 80002d6:	613b      	str	r3, [r7, #16]
		 temp |=((GPIO_Init->Pull) << (position *2U));
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	693a      	ldr	r2, [r7, #16]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	613b      	str	r3, [r7, #16]
		 GPIOx->PUPDR = temp;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	693a      	ldr	r2, [r7, #16]
 80002ee:	60da      	str	r2, [r3, #12]
	for(position =0U; position <GPIO_NUMBER;position++){
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d9b9      	bls.n	8000270 <LIB_GPIO_Init+0x1c>
		}


	}

}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	371c      	adds	r7, #28
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LIB_GPIO_TogglePin>:
	   GPIOx->BSRR = (uint32_t)GPIO_Pin <<16;
	}
}


void LIB_GPIO_TogglePin(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin){
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	460b      	mov	r3, r1
 8000314:	807b      	strh	r3, [r7, #2]

	 GPIOx->ODR ^= GPIO_Pin;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	405a      	eors	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	615a      	str	r2, [r3, #20]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <__LIB_RCC_GPIOA_CLK_ENABLE>:

void __LIB_RCC_GPIOA_CLK_ENABLE(void){  RCC->AHB1ENR |= GPIOA_EN;}
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <__LIB_RCC_GPIOA_CLK_ENABLE+0x1c>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <__LIB_RCC_GPIOA_CLK_ENABLE+0x1c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff3f 	bl	8000204 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	20000030 	.word	0x20000030

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
