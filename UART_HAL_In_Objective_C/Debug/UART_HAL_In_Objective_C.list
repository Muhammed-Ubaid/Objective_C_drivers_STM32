
UART_HAL_In_Objective_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000410  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000410  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004f3  00000000  00000000  00010483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c3  00000000  00000000  00010976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010fd  00000000  00000000  00010c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a19  00000000  00000000  00011d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000041d0  00000000  00000000  0001271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d8  00000000  00000000  000168ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000169c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003f0 	.word	0x080003f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003f0 	.word	0x080003f0

08000204 <main>:
#include  "my_stm32f4_uart_lib.h"




int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

   LIB_UART_Init(TX_ONLY,_115200);
 8000208:	2100      	movs	r1, #0
 800020a:	2001      	movs	r0, #1
 800020c:	f000 f80e 	bl	800022c <LIB_UART_Init>


	while(1){
		
   LIB_UART_Write('Y');
 8000210:	2059      	movs	r0, #89	; 0x59
 8000212:	f000 f887 	bl	8000324 <LIB_UART_Write>
   LIB_UART_Write('E');
 8000216:	2045      	movs	r0, #69	; 0x45
 8000218:	f000 f884 	bl	8000324 <LIB_UART_Write>
   LIB_UART_Write('S');
 800021c:	2053      	movs	r0, #83	; 0x53
 800021e:	f000 f881 	bl	8000324 <LIB_UART_Write>
   LIB_UART_Write('\r');
 8000222:	200d      	movs	r0, #13
 8000224:	f000 f87e 	bl	8000324 <LIB_UART_Write>
   LIB_UART_Write('Y');
 8000228:	e7f2      	b.n	8000210 <main+0xc>
	...

0800022c <LIB_UART_Init>:
#define UART2_CR1_EN1				0x2000  //Enable UART
#define UART2_CR1_DIS				0x0000  //Disable UART



void LIB_UART_Init(UART_ComType comtype, UART_BaudrateType baudrate){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]

	RCC->AHB1ENR |=1;  //Enable GPIOA clock
 800023c:	4b36      	ldr	r3, [pc, #216]	; (8000318 <LIB_UART_Init+0xec>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4a35      	ldr	r2, [pc, #212]	; (8000318 <LIB_UART_Init+0xec>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB1ENR |= 0x20000; //Enable USART2 clock
 8000248:	4b33      	ldr	r3, [pc, #204]	; (8000318 <LIB_UART_Init+0xec>)
 800024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024c:	4a32      	ldr	r2, [pc, #200]	; (8000318 <LIB_UART_Init+0xec>)
 800024e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000252:	6413      	str	r3, [r2, #64]	; 0x40
	
	USART2->CR1 = UART2_CR1_DIS;
 8000254:	4b31      	ldr	r3, [pc, #196]	; (800031c <LIB_UART_Init+0xf0>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
	
	switch(comtype){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b02      	cmp	r3, #2
 800025e:	d025      	beq.n	80002ac <LIB_UART_Init+0x80>
 8000260:	2b02      	cmp	r3, #2
 8000262:	dc36      	bgt.n	80002d2 <LIB_UART_Init+0xa6>
 8000264:	2b00      	cmp	r3, #0
 8000266:	d011      	beq.n	800028c <LIB_UART_Init+0x60>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d132      	bne.n	80002d2 <LIB_UART_Init+0xa6>
		
		case TX_ONLY:
			
			GPIOA->MODER  |=  0x0020; //Enable alternate function at PA2
 800026c:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <LIB_UART_Init+0xf4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a2b      	ldr	r2, [pc, #172]	; (8000320 <LIB_UART_Init+0xf4>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]
			GPIOA->AFR[0] |=0x0700; //alt7 for USART2
 8000278:	4b29      	ldr	r3, [pc, #164]	; (8000320 <LIB_UART_Init+0xf4>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <LIB_UART_Init+0xf4>)
 800027e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000282:	6213      	str	r3, [r2, #32]
			USART2->CR1 = CR1_CNF1_TX; // Enable TX,  8-bit data
 8000284:	4b25      	ldr	r3, [pc, #148]	; (800031c <LIB_UART_Init+0xf0>)
 8000286:	2208      	movs	r2, #8
 8000288:	60da      	str	r2, [r3, #12]
			
		  break;
 800028a:	e023      	b.n	80002d4 <LIB_UART_Init+0xa8>
		
		case RX_ONLY:
			
		  GPIOA->MODER  |= 0x0080;  //PA3 
 800028c:	4b24      	ldr	r3, [pc, #144]	; (8000320 <LIB_UART_Init+0xf4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a23      	ldr	r2, [pc, #140]	; (8000320 <LIB_UART_Init+0xf4>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000296:	6013      	str	r3, [r2, #0]
		  GPIOA->AFR[0] |= 0x7000;  //alt7 for UART2
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <LIB_UART_Init+0xf4>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <LIB_UART_Init+0xf4>)
 800029e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002a2:	6213      	str	r3, [r2, #32]
		  USART2->CR1 = CR1_CNF1_RX;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <LIB_UART_Init+0xf0>)
 80002a6:	2204      	movs	r2, #4
 80002a8:	60da      	str	r2, [r3, #12]
			break;
 80002aa:	e013      	b.n	80002d4 <LIB_UART_Init+0xa8>
		
		case RX_AND_TX:
		  GPIOA->MODER  |= 0x0020 |0x0080;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <LIB_UART_Init+0xf4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <LIB_UART_Init+0xf4>)
 80002b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002b6:	6013      	str	r3, [r2, #0]
		  GPIOA->AFR[0] |=0x0700 |0x7000;
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <LIB_UART_Init+0xf4>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a18      	ldr	r2, [pc, #96]	; (8000320 <LIB_UART_Init+0xf4>)
 80002be:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80002c2:	6213      	str	r3, [r2, #32]
		  USART2->CR1   |=CR1_CNF1_TX|CR1_CNF1_RX;
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <LIB_UART_Init+0xf0>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <LIB_UART_Init+0xf0>)
 80002ca:	f043 030c 	orr.w	r3, r3, #12
 80002ce:	60d3      	str	r3, [r2, #12]
			
			break;
 80002d0:	e000      	b.n	80002d4 <LIB_UART_Init+0xa8>
		
		default:
			break;
 80002d2:	bf00      	nop
	
	}
	
	switch(baudrate){
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <LIB_UART_Init+0xb4>
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d004      	beq.n	80002e8 <LIB_UART_Init+0xbc>
		case _9600:
			USART2->BRR = BRR_CNF1_9600;
      break;
		
		default:
			break;
 80002de:	e008      	b.n	80002f2 <LIB_UART_Init+0xc6>
			USART2->BRR = BRR_CNF1_115200;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <LIB_UART_Init+0xf0>)
 80002e2:	228b      	movs	r2, #139	; 0x8b
 80002e4:	609a      	str	r2, [r3, #8]
			break;
 80002e6:	e004      	b.n	80002f2 <LIB_UART_Init+0xc6>
			USART2->BRR = BRR_CNF1_9600;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <LIB_UART_Init+0xf0>)
 80002ea:	f240 6283 	movw	r2, #1667	; 0x683
 80002ee:	609a      	str	r2, [r3, #8]
      break;
 80002f0:	bf00      	nop
	
	}
	
	USART2->CR2  = CR2_CNF1;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <LIB_UART_Init+0xf0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
	USART2->CR3  = CR3_CNF1;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <LIB_UART_Init+0xf0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
	USART2->CR1 |= UART2_CR1_EN1;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <LIB_UART_Init+0xf0>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	4a06      	ldr	r2, [pc, #24]	; (800031c <LIB_UART_Init+0xf0>)
 8000304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000308:	60d3      	str	r3, [r2, #12]

}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	40004400 	.word	0x40004400
 8000320:	40020000 	.word	0x40020000

08000324 <LIB_UART_Write>:
	while(!(USART2->SR & 0x0020)){}//Wait till character arrives
	return USART2->DR;
	
}

void LIB_UART_Write(int ch){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

	while(!(USART2->SR & 0x0080)){} // Wait until Tx buffer empty
 800032c:	bf00      	nop
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LIB_UART_Write+0x2c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <LIB_UART_Write+0xa>
	USART2->DR = (ch & 0xFF);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <LIB_UART_Write+0x2c>)
 800033e:	b2db      	uxtb	r3, r3
 8000340:	6053      	str	r3, [r2, #4]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40004400 	.word	0x40004400

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff3d 	bl	8000204 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
